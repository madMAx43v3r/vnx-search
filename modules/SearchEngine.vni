package vnx.search;

module SearchEngine implements SearchInterface {
	
	vnx.TopicPtr input_url_index = "backend.url_index.updates";
	vnx.TopicPtr input_page_index = "backend.page_index.key_updates";
	vnx.TopicPtr input_page_content = "backend.page_content.key_updates";
	
	string url_index_server = "UrlIndex";
	string page_index_server = "PageIndex";
	string page_content_server = "PageContent";
	
	int max_link_cache = 100000;
	
	int max_word_cache = 500000;
	
	int max_num_pending = 100;				// number of async requests
	
	int num_update_threads = 4;
	
	int commit_delay = 10;					// [sec]
	
	int link_commit_interval = 60;			// [sec]
	
	int word_commit_interval = 3600;		// [sec]
	
	int lock_timeout = 100;					// [sec]
	
	int page_ranking_size = 10000;			// number of pages
	
	int queue_interval_ms = 10;				// queue check interval [ms]
	
	int stats_interval_ms = 10000;
	
	float rank_decay = 0.5;
	
	bool update_word_array;					// if to re-compute word_array data
	bool update_word_context;				// if to re-compute word_context data
	bool update_page_info;					// if to re-compute page_info data
	bool reset_rank_values;					// if to re-initialize rank_values
	
	vector<string> protocols;				// protocols to allow as links
	
	/*
	 * Note: May return less items in case of unknown ids.
	 */
	vector<page_entry_t> get_page_entries(vector<uint> page_ids) const async;
	
	void handle(vnx.keyvalue.SyncUpdate sample);
	void handle(vnx.keyvalue.SyncInfo sample);
	
}
