package vnx.search;

import vnx.Object;

module SearchEngine {
	
	vnx.TopicPtr input_url_index = "backend.url_index.updates";
	vnx.TopicPtr input_page_index = "backend.page_index.key_updates";
	vnx.TopicPtr input_page_content = "backend.page_content.key_updates";
	
	string url_index_server = "UrlIndex";
	string page_index_server = "PageIndex";
	string page_content_server = "PageContent";
	
	int max_query_pages = 1000;				// max query results
	
	int max_link_cache = 100000;
	
	int max_word_cache = 500000;
	
	int max_num_pending = 100;				// number of async requests
	
	int num_query_threads = 4;
	
	int num_update_threads = 4;
	
	int link_commit_interval = 60;			// [sec]
	
	int word_commit_interval = 3600;		// [sec]
	
	int lock_timeout = 100;					// [sec]
	
	int queue_interval_ms = 10;		// [ms]
	
	int stats_interval_ms = 10000;
	
	vector<string> protocols;				// protocols to allow as links
	
	
	SearchResult* query(vector<string> words, query_options_t options) const async;
	
	Object get_domain_info(string host, int limit, uint offset) const async;
	
	Object get_page_info(string url_key) const async;
	
	vector<Object> get_domain_list(int limit, uint offset) const;
	
	vector<string> reverse_lookup(string url_key) const async;
	
	vector<pair<string, uint>> reverse_domain_lookup(string url_key) const async;
	
	vector<string> suggest_words(string prefix, int limit) const;
	
	vector<string> suggest_domains(string prefix, int limit) const;
	
	
	void handle(vnx.keyvalue.SyncUpdate sample);
	
	void handle(vnx.keyvalue.SyncInfo sample);
	
}
