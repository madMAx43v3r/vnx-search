
// AUTO GENERATED by vnxcppcodegen

#ifndef INCLUDE_vnx_search_QueryInterface_ASYNC_CLIENT_HXX_
#define INCLUDE_vnx_search_QueryInterface_ASYNC_CLIENT_HXX_

#include <vnx/AsyncClient.h>
#include <vnx/search/SearchResult.hxx>
#include <vnx/search/query_options_t.hxx>


namespace vnx {
namespace search {

class QueryInterfaceAsyncClient : public vnx::AsyncClient {
public:
	QueryInterfaceAsyncClient(const std::string& service_name);
	
	QueryInterfaceAsyncClient(vnx::Hash64 service_addr);
	
	uint64_t query(const std::vector<std::string>& words, const ::vnx::search::query_options_t& options, 
			const std::function<void(std::shared_ptr<const ::vnx::search::SearchResult>)>& _callback = std::function<void(std::shared_ptr<const ::vnx::search::SearchResult>)>(),
			const std::function<void(const std::exception&)>& _error_callback = std::function<void(const std::exception&)>());
	
	std::vector<uint64_t> vnx_get_pending_ids() const override;
	
protected:
	void vnx_purge_request(uint64_t _request_id, const std::exception& _ex) override;
	
	void vnx_callback_switch(uint64_t _request_id, std::shared_ptr<const vnx::Value> _value) override;
	
private:
	std::map<uint64_t, std::pair<std::function<void(std::shared_ptr<const ::vnx::search::SearchResult>)>, std::function<void(const std::exception&)>>> vnx_queue_query;
	
};


} // namespace vnx
} // namespace search

#endif // INCLUDE_vnx_search_QueryInterface_ASYNC_CLIENT_HXX_
