
// AUTO GENERATED by vnxcppcodegen

#ifndef INCLUDE_vnx_search_ArchiveProxyBase_HXX_
#define INCLUDE_vnx_search_ArchiveProxyBase_HXX_

#include <vnx/search/package.hxx>
#include <vnx/Module.h>
#include <vnx/TopicPtr.hpp>
#include <vnx/search/HttpResponse.hxx>


namespace vnx {
namespace search {

class ArchiveProxyBase : public ::vnx::Module {
public:
	
	::vnx::TopicPtr input_http;
	std::string server_name = "HttpArchive";
	int32_t buffer_size = 100;
	
	typedef ::vnx::Module Super;
	
	static const vnx::Hash64 VNX_TYPE_HASH;
	static const vnx::Hash64 VNX_CODE_HASH;
	
	ArchiveProxyBase(const std::string& _vnx_name);
	
	vnx::Hash64 get_type_hash() const;
	const char* get_type_name() const;
	const vnx::TypeCode* get_type_code() const;
	
	void read(std::istream& _in);
	void write(std::ostream& _out) const;
	
	void accept(vnx::Visitor& _visitor) const;
	
	vnx::Object to_object() const;
	void from_object(const vnx::Object& object);
	
	vnx::Variant get_field(const std::string& name) const;
	void set_field(const std::string& name, const vnx::Variant& value);
	
	friend std::ostream& operator<<(std::ostream& _out, const ArchiveProxyBase& _value);
	friend std::istream& operator>>(std::istream& _in, ArchiveProxyBase& _value);
	
	static const vnx::TypeCode* static_get_type_code();
	static std::shared_ptr<vnx::TypeCode> static_create_type_code();
	
protected:
	virtual void handle(std::shared_ptr<const ::vnx::search::HttpResponse> _value, std::shared_ptr<const vnx::Sample> _sample) { handle(_value); }
	virtual void handle(std::shared_ptr<const ::vnx::search::HttpResponse> _value) {}
	
	void vnx_handle_switch(std::shared_ptr<const vnx::Sample> _sample) override;
	std::shared_ptr<vnx::Value> vnx_call_switch(std::shared_ptr<const vnx::Value> _method, const vnx::request_id_t& _request_id) override;
	
};


} // namespace vnx
} // namespace search

#endif // INCLUDE_vnx_search_ArchiveProxyBase_HXX_
