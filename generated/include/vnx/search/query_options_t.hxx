
// AUTO GENERATED by vnxcppcodegen

#ifndef INCLUDE_vnx_search_query_options_t_HXX_
#define INCLUDE_vnx_search_query_options_t_HXX_

#include <vnx/Type.h>
#include <vnx/search/package.hxx>
#include <vnx/search/score_type_e.hxx>
#include <vnx/search/search_flags_e.hxx>


namespace vnx {
namespace search {

struct query_options_t {
	
	
	int32_t limit = 10;
	uint32_t offset = 0;
	int32_t context = 20;
	int32_t max_group_size = 1;
	uint32_t max_results = 1000;
	::vnx::search::score_type_e score_type = ::vnx::search::score_type_e::AVG_SCORE;
	std::vector<::vnx::search::search_flags_e> flags;
	
	static const vnx::Hash64 VNX_TYPE_HASH;
	static const vnx::Hash64 VNX_CODE_HASH;
	
	vnx::Hash64 get_type_hash() const;
	const char* get_type_name() const;
	const vnx::TypeCode* get_type_code() const;
	
	static std::shared_ptr<query_options_t> create();
	std::shared_ptr<query_options_t> clone() const;
	
	void read(vnx::TypeInput& _in, const vnx::TypeCode* _type_code, const uint16_t* _code);
	void write(vnx::TypeOutput& _out, const vnx::TypeCode* _type_code, const uint16_t* _code) const;
	
	void read(std::istream& _in);
	void write(std::ostream& _out) const;
	
	void accept(vnx::Visitor& _visitor) const;
	
	vnx::Object to_object() const;
	void from_object(const vnx::Object& object);
	
	vnx::Variant get_field(const std::string& name) const;
	void set_field(const std::string& name, const vnx::Variant& value);
	
	friend std::ostream& operator<<(std::ostream& _out, const query_options_t& _value);
	friend std::istream& operator>>(std::istream& _in, query_options_t& _value);
	
	static const vnx::TypeCode* static_get_type_code();
	static std::shared_ptr<vnx::TypeCode> static_create_type_code();
	
};


} // namespace vnx
} // namespace search

#endif // INCLUDE_vnx_search_query_options_t_HXX_
