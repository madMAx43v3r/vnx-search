
// AUTO GENERATED by vnxcppcodegen

#ifndef INCLUDE_vnx_search_CrawlFrontendBase_HXX_
#define INCLUDE_vnx_search_CrawlFrontendBase_HXX_

#include <vnx/search/package.hxx>
#include <vnx/Hash64.hpp>
#include <vnx/Module.h>
#include <vnx/TopicPtr.hpp>
#include <vnx/search/FetchResult.hxx>


namespace vnx {
namespace search {

class CrawlFrontendBase : public ::vnx::Module {
public:
	
	::vnx::TopicPtr output_http = "frontend.http_responses";
	::vnx::TopicPtr output_text = "frontend.text_responses";
	int32_t num_threads = 10;
	int32_t response_timeout_ms = 30000;
	int32_t stats_interval_ms = 10000;
	int64_t max_content_length = 1048576;
	int64_t max_response_size = 4194304;
	std::string processor_server = "CrawlProcessor";
	std::string user_agent = "Mozilla/5.0";
	
	typedef ::vnx::Module Super;
	
	static const vnx::Hash64 VNX_TYPE_HASH;
	static const vnx::Hash64 VNX_CODE_HASH;
	
	CrawlFrontendBase(const std::string& _vnx_name);
	
	vnx::Hash64 get_type_hash() const;
	const char* get_type_name() const;
	const vnx::TypeCode* get_type_code() const;
	
	void read(std::istream& _in);
	void write(std::ostream& _out) const;
	
	void accept(vnx::Visitor& _visitor) const;
	
	vnx::Object to_object() const;
	void from_object(const vnx::Object& object);
	
	friend std::ostream& operator<<(std::ostream& _out, const CrawlFrontendBase& _value);
	friend std::istream& operator>>(std::istream& _in, CrawlFrontendBase& _value);
	
	static const vnx::TypeCode* static_get_type_code();
	static std::shared_ptr<vnx::TypeCode> static_create_type_code();
	
protected:
	virtual void fetch_async(const std::string& url, const vnx::request_id_t& _request_id) const = 0;
	void fetch_async_return(const vnx::request_id_t& _request_id, const std::shared_ptr<const ::vnx::search::FetchResult>& _ret_0) const;
	virtual void register_parser(const ::vnx::Hash64& address, const std::vector<std::string>& mime_types, const int32_t& num_threads) = 0;
	
	void vnx_handle_switch(std::shared_ptr<const vnx::Sample> _sample) override;
	std::shared_ptr<vnx::Value> vnx_call_switch(std::shared_ptr<const vnx::Value> _method, const vnx::request_id_t& _request_id) override;
	
};


} // namespace vnx
} // namespace search

#endif // INCLUDE_vnx_search_CrawlFrontendBase_HXX_
