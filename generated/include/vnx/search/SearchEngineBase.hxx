
// AUTO GENERATED by vnxcppcodegen

#ifndef INCLUDE_vnx_search_SearchEngineBase_HXX_
#define INCLUDE_vnx_search_SearchEngineBase_HXX_

#include <vnx/search/package.hxx>
#include <vnx/Module.h>
#include <vnx/Object.hpp>
#include <vnx/TopicPtr.hpp>
#include <vnx/keyvalue/SyncInfo.hxx>
#include <vnx/keyvalue/SyncUpdate.hxx>
#include <vnx/search/page_entry_t.hxx>


namespace vnx {
namespace search {

class SearchEngineBase : public ::vnx::Module {
public:
	
	::vnx::TopicPtr input_url_index = "backend.url_index.updates";
	::vnx::TopicPtr input_page_index = "backend.page_index.key_updates";
	::vnx::TopicPtr input_page_content = "backend.page_content.key_updates";
	std::string url_index_server = "UrlIndex";
	std::string page_index_server = "PageIndex";
	std::string page_content_server = "PageContent";
	int32_t max_info_cache = 100000;
	int32_t max_page_cache = 100000;
	int32_t max_word_cache = 500000;
	int32_t max_num_pending = 100;
	int32_t num_update_threads = 4;
	int32_t commit_delay = 10;
	int32_t info_commit_interval = 1800;
	int32_t word_commit_interval = 3600;
	int32_t lock_timeout = 100;
	int32_t page_ranking_size = 1000;
	int32_t word_suggest_threshold = 10;
	int32_t queue_interval_ms = 10;
	int32_t stats_interval_ms = 10000;
	vnx::float32_t rank_update_interval = 1440;
	vnx::float32_t rank_decay = 0.5;
	vnx::bool_t update_word_array = 0;
	vnx::bool_t update_word_context = 0;
	vnx::bool_t update_page_info = 0;
	vnx::bool_t reset_rank_values = 0;
	std::string bad_word_chars = ".,:_";
	std::vector<std::string> protocols;
	
	typedef ::vnx::Module Super;
	
	static const vnx::Hash64 VNX_TYPE_HASH;
	static const vnx::Hash64 VNX_CODE_HASH;
	
	static constexpr uint64_t VNX_TYPE_ID = 0x4e0f26d3496896a1ull;
	
	SearchEngineBase(const std::string& _vnx_name);
	
	vnx::Hash64 get_type_hash() const override;
	std::string get_type_name() const override;
	const vnx::TypeCode* get_type_code() const override;
	
	void read(std::istream& _in) override;
	void write(std::ostream& _out) const override;
	
	void accept(vnx::Visitor& _visitor) const override;
	
	vnx::Object to_object() const override;
	void from_object(const vnx::Object& object) override;
	
	vnx::Variant get_field(const std::string& name) const override;
	void set_field(const std::string& name, const vnx::Variant& value) override;
	
	friend std::ostream& operator<<(std::ostream& _out, const SearchEngineBase& _value);
	friend std::istream& operator>>(std::istream& _in, SearchEngineBase& _value);
	
	static const vnx::TypeCode* static_get_type_code();
	static std::shared_ptr<vnx::TypeCode> static_create_type_code();
	
protected:
	using Super::handle;
	
	virtual void get_page_entries_async(const std::vector<uint32_t>& page_ids, const vnx::request_id_t& _request_id) const = 0;
	void get_page_entries_async_return(const vnx::request_id_t& _request_id, const std::vector<::vnx::search::page_entry_t>& _ret_0) const;
	virtual void handle(std::shared_ptr<const ::vnx::keyvalue::SyncUpdate> _value) {}
	virtual void handle(std::shared_ptr<const ::vnx::keyvalue::SyncInfo> _value) {}
	virtual void get_domain_info_async(const std::string& host, const int32_t& limit, const uint32_t& offset, const vnx::request_id_t& _request_id) const = 0;
	void get_domain_info_async_return(const vnx::request_id_t& _request_id, const ::vnx::Object& _ret_0) const;
	virtual void get_page_info_async(const std::string& url_key, const vnx::request_id_t& _request_id) const = 0;
	void get_page_info_async_return(const vnx::request_id_t& _request_id, const ::vnx::Object& _ret_0) const;
	virtual void get_page_ranks_async(const std::vector<std::string>& url_keys, const vnx::bool_t& direct, const vnx::request_id_t& _request_id) const = 0;
	void get_page_ranks_async_return(const vnx::request_id_t& _request_id, const std::vector<vnx::float32_t>& _ret_0) const;
	virtual std::vector<::vnx::Object> get_domain_list(const int32_t& limit, const uint32_t& offset) const = 0;
	virtual void get_page_ranking_async(const int32_t& limit, const uint32_t& offset, const vnx::request_id_t& _request_id) const = 0;
	void get_page_ranking_async_return(const vnx::request_id_t& _request_id, const std::vector<std::pair<std::string, vnx::float32_t>>& _ret_0) const;
	virtual void get_word_context_async(const std::string& word, const int32_t& limit, const uint32_t& offset, const vnx::request_id_t& _request_id) const = 0;
	void get_word_context_async_return(const vnx::request_id_t& _request_id, const std::vector<std::pair<std::string, vnx::float32_t>>& _ret_0) const;
	virtual void reverse_lookup_async(const std::string& url_key, const int32_t& limit, const uint32_t& offset, const vnx::request_id_t& _request_id) const = 0;
	void reverse_lookup_async_return(const vnx::request_id_t& _request_id, const std::vector<std::pair<std::string, vnx::float32_t>>& _ret_0) const;
	virtual void reverse_domain_lookup_async(const std::string& url_key, const int32_t& limit, const uint32_t& offset, const vnx::request_id_t& _request_id) const = 0;
	void reverse_domain_lookup_async_return(const vnx::request_id_t& _request_id, const std::vector<std::pair<std::string, uint32_t>>& _ret_0) const;
	virtual std::vector<std::pair<std::string, uint32_t>> suggest_words(const std::string& prefix, const int32_t& limit) const = 0;
	
	void vnx_handle_switch(std::shared_ptr<const vnx::Value> _value) override;
	std::shared_ptr<vnx::Value> vnx_call_switch(std::shared_ptr<const vnx::Value> _method, const vnx::request_id_t& _request_id) override;
	
};


} // namespace vnx
} // namespace search


namespace vnx {

} // vnx

#endif // INCLUDE_vnx_search_SearchEngineBase_HXX_
