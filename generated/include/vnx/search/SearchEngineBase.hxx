
// AUTO GENERATED by vnxcppcodegen

#ifndef INCLUDE_vnx_search_SearchEngineBase_HXX_
#define INCLUDE_vnx_search_SearchEngineBase_HXX_

#include <vnx/search/package.hxx>
#include <vnx/Module.h>
#include <vnx/TopicPtr.h>
#include <vnx/keyvalue/KeyValuePair.hxx>
#include <vnx/keyvalue/SyncInfo.hxx>
#include <vnx/search/DomainIndex.hxx>
#include <vnx/search/SearchResult.hxx>
#include <vnx/search/search_flags_e.hxx>


namespace vnx {
namespace search {

class SearchEngineBase : public ::vnx::Module {
public:
	
	::vnx::TopicPtr input_page_index = "backend.page_index.updates";
	::std::string url_index_server = "UrlIndex";
	::std::string page_index_server = "PageIndex";
	::std::string page_content_server = "PageContent";
	::int32_t max_depth = 5;
	::int32_t jump_cost = 3;
	::int32_t max_query_pages = 1000;
	::int32_t num_query_threads = 4;
	::int32_t num_update_threads = 4;
	::int32_t commit_interval = 3600;
	::int32_t stats_interval_ms = 10000;
	::vnx::float32_t word_power = 1;
	::std::vector<::std::string> protocols;
	
	typedef ::vnx::Module Super;
	
	static const vnx::Hash64 VNX_TYPE_HASH;
	static const vnx::Hash64 VNX_CODE_HASH;
	
	SearchEngineBase(const std::string& _vnx_name);
	
	vnx::Hash64 get_type_hash() const;
	const char* get_type_name() const;
	const vnx::TypeCode* get_type_code() const;
	
	void read(std::istream& _in);
	void write(std::ostream& _out) const;
	
	void accept(vnx::Visitor& _visitor) const;
	
	vnx::Object to_object() const;
	void from_object(const vnx::Object& object);
	
	friend std::ostream& operator<<(std::ostream& _out, const SearchEngineBase& _value);
	friend std::istream& operator>>(std::istream& _in, SearchEngineBase& _value);
	
	static const vnx::TypeCode* static_get_type_code();
	static std::shared_ptr<vnx::TypeCode> static_create_type_code();
	
protected:
	virtual ::std::shared_ptr<const ::vnx::search::DomainIndex> get_domain_info(const ::std::string& host, const ::int32_t& limit, const ::uint32_t& offset) const = 0;
	virtual ::std::vector<::vnx::search::DomainIndex> get_domain_list(const ::int32_t& limit, const ::uint32_t& offset) const = 0;
	virtual void handle(std::shared_ptr<const ::vnx::keyvalue::KeyValuePair> _value, std::shared_ptr<const ::vnx::Sample> _sample) { handle(_value); }
	virtual void handle(std::shared_ptr<const ::vnx::keyvalue::KeyValuePair> _value) {}
	virtual void handle(std::shared_ptr<const ::vnx::keyvalue::SyncInfo> _value, std::shared_ptr<const ::vnx::Sample> _sample) { handle(_value); }
	virtual void handle(std::shared_ptr<const ::vnx::keyvalue::SyncInfo> _value) {}
	virtual void query_async(const ::std::vector<::std::string>& words, const ::int32_t& limit, const ::uint32_t& offset, const ::std::vector<::vnx::search::search_flags_e>& flags, const std::function<void(const ::std::shared_ptr<const ::vnx::search::SearchResult>&)>& _callback, const vnx::request_id_t& _request_id) const = 0;
	virtual ::std::vector<::std::string> reverse_domain_lookup(const ::std::string& url_key) const = 0;
	virtual ::std::vector<::std::string> reverse_lookup(const ::std::string& url_key) const = 0;
	virtual ::std::vector<::std::string> suggest_domains(const ::std::string& prefix, const ::int32_t& limit) const = 0;
	virtual ::std::vector<::std::string> suggest_words(const ::std::string& prefix, const ::int32_t& limit) const = 0;
	
	void vnx_handle_switch(std::shared_ptr<const ::vnx::Sample> _sample) override;
	std::shared_ptr<vnx::Value> vnx_call_switch(vnx::TypeInput& _in, const vnx::TypeCode* _call_type, const vnx::request_id_t& _request_id) override;
	
private:
	void query_async_return(const vnx::request_id_t& _request_id, const ::std::shared_ptr<const ::vnx::search::SearchResult>& _ret_0);
	
};


} // namespace vnx
} // namespace search

#endif // INCLUDE_vnx_search_SearchEngineBase_HXX_
