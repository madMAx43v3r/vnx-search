
// AUTO GENERATED by vnxcppcodegen

#include <vnx/search/package.hxx>
#include <vnx/search/SearchEngineAsyncClient.hxx>
#include <vnx/Input.h>
#include <vnx/Output.h>


namespace vnx {
namespace search {

SearchEngineAsyncClient::SearchEngineAsyncClient(const std::string& service_name)
	:	AsyncClient::AsyncClient(vnx::Hash64(service_name))
{
}

SearchEngineAsyncClient::SearchEngineAsyncClient(vnx::Hash64 service_addr)
	:	AsyncClient::AsyncClient(service_addr)
{
}

uint64_t SearchEngineAsyncClient::get_domain_info(const ::std::string& host, const ::int32_t& limit, const ::uint32_t& offset, const std::function<void(::vnx::Object)>& _callback) {
	std::shared_ptr<vnx::Binary> _argument_data = vnx::Binary::create();
	vnx::BinaryOutputStream _stream_out(_argument_data.get());
	vnx::TypeOutput _out(&_stream_out);
	const vnx::TypeCode* _type_code = vnx::search::vnx_native_type_code_SearchEngine_get_domain_info;
	{
		char* const _buf = _out.write(8);
		vnx::write_value(_buf + 0, limit);
		vnx::write_value(_buf + 4, offset);
		vnx::write(_out, host, _type_code, _type_code->fields[0].code.data());
	}
	_out.flush();
	_argument_data->type_code = _type_code;
	const uint64_t _request_id = vnx_request(_argument_data);
	vnx_queue_get_domain_info[_request_id] = _callback;
	vnx_num_pending++;
	return _request_id;
}

uint64_t SearchEngineAsyncClient::get_domain_list(const ::int32_t& limit, const ::uint32_t& offset, const std::function<void(::std::vector<::vnx::Object>)>& _callback) {
	std::shared_ptr<vnx::Binary> _argument_data = vnx::Binary::create();
	vnx::BinaryOutputStream _stream_out(_argument_data.get());
	vnx::TypeOutput _out(&_stream_out);
	const vnx::TypeCode* _type_code = vnx::search::vnx_native_type_code_SearchEngine_get_domain_list;
	{
		char* const _buf = _out.write(8);
		vnx::write_value(_buf + 0, limit);
		vnx::write_value(_buf + 4, offset);
	}
	_out.flush();
	_argument_data->type_code = _type_code;
	const uint64_t _request_id = vnx_request(_argument_data);
	vnx_queue_get_domain_list[_request_id] = _callback;
	vnx_num_pending++;
	return _request_id;
}

uint64_t SearchEngineAsyncClient::get_page_info(const ::std::string& url_key, const std::function<void(::vnx::Object)>& _callback) {
	std::shared_ptr<vnx::Binary> _argument_data = vnx::Binary::create();
	vnx::BinaryOutputStream _stream_out(_argument_data.get());
	vnx::TypeOutput _out(&_stream_out);
	const vnx::TypeCode* _type_code = vnx::search::vnx_native_type_code_SearchEngine_get_page_info;
	{
		vnx::write(_out, url_key, _type_code, _type_code->fields[0].code.data());
	}
	_out.flush();
	_argument_data->type_code = _type_code;
	const uint64_t _request_id = vnx_request(_argument_data);
	vnx_queue_get_page_info[_request_id] = _callback;
	vnx_num_pending++;
	return _request_id;
}

uint64_t SearchEngineAsyncClient::handle(const ::std::shared_ptr<const ::vnx::keyvalue::KeyValuePair>& sample, const std::function<void()>& _callback) {
	std::shared_ptr<vnx::Binary> _argument_data = vnx::Binary::create();
	vnx::BinaryOutputStream _stream_out(_argument_data.get());
	vnx::TypeOutput _out(&_stream_out);
	const vnx::TypeCode* _type_code = vnx::search::vnx_native_type_code_SearchEngine_handle_vnx_keyvalue_KeyValuePair;
	{
		vnx::write(_out, sample, _type_code, _type_code->fields[0].code.data());
	}
	_out.flush();
	_argument_data->type_code = _type_code;
	const uint64_t _request_id = vnx_request(_argument_data);
	vnx_queue_handle_vnx_keyvalue_KeyValuePair[_request_id] = _callback;
	vnx_num_pending++;
	return _request_id;
}

uint64_t SearchEngineAsyncClient::handle(const ::std::shared_ptr<const ::vnx::keyvalue::SyncInfo>& sample, const std::function<void()>& _callback) {
	std::shared_ptr<vnx::Binary> _argument_data = vnx::Binary::create();
	vnx::BinaryOutputStream _stream_out(_argument_data.get());
	vnx::TypeOutput _out(&_stream_out);
	const vnx::TypeCode* _type_code = vnx::search::vnx_native_type_code_SearchEngine_handle_vnx_keyvalue_SyncInfo;
	{
		vnx::write(_out, sample, _type_code, _type_code->fields[0].code.data());
	}
	_out.flush();
	_argument_data->type_code = _type_code;
	const uint64_t _request_id = vnx_request(_argument_data);
	vnx_queue_handle_vnx_keyvalue_SyncInfo[_request_id] = _callback;
	vnx_num_pending++;
	return _request_id;
}

uint64_t SearchEngineAsyncClient::query(const ::std::vector<::std::string>& words, const ::int32_t& limit, const ::uint32_t& offset, const ::std::vector<::vnx::search::search_flags_e>& flags, const std::function<void(::std::shared_ptr<const ::vnx::search::SearchResult>)>& _callback) {
	std::shared_ptr<vnx::Binary> _argument_data = vnx::Binary::create();
	vnx::BinaryOutputStream _stream_out(_argument_data.get());
	vnx::TypeOutput _out(&_stream_out);
	const vnx::TypeCode* _type_code = vnx::search::vnx_native_type_code_SearchEngine_query;
	{
		char* const _buf = _out.write(8);
		vnx::write_value(_buf + 0, limit);
		vnx::write_value(_buf + 4, offset);
		vnx::write(_out, words, _type_code, _type_code->fields[0].code.data());
		vnx::write(_out, flags, _type_code, _type_code->fields[3].code.data());
	}
	_out.flush();
	_argument_data->type_code = _type_code;
	const uint64_t _request_id = vnx_request(_argument_data);
	vnx_queue_query[_request_id] = _callback;
	vnx_num_pending++;
	return _request_id;
}

uint64_t SearchEngineAsyncClient::reverse_domain_lookup(const ::std::string& url_key, const std::function<void(::std::vector<::std::string>)>& _callback) {
	std::shared_ptr<vnx::Binary> _argument_data = vnx::Binary::create();
	vnx::BinaryOutputStream _stream_out(_argument_data.get());
	vnx::TypeOutput _out(&_stream_out);
	const vnx::TypeCode* _type_code = vnx::search::vnx_native_type_code_SearchEngine_reverse_domain_lookup;
	{
		vnx::write(_out, url_key, _type_code, _type_code->fields[0].code.data());
	}
	_out.flush();
	_argument_data->type_code = _type_code;
	const uint64_t _request_id = vnx_request(_argument_data);
	vnx_queue_reverse_domain_lookup[_request_id] = _callback;
	vnx_num_pending++;
	return _request_id;
}

uint64_t SearchEngineAsyncClient::reverse_lookup(const ::std::string& url_key, const std::function<void(::std::vector<::std::string>)>& _callback) {
	std::shared_ptr<vnx::Binary> _argument_data = vnx::Binary::create();
	vnx::BinaryOutputStream _stream_out(_argument_data.get());
	vnx::TypeOutput _out(&_stream_out);
	const vnx::TypeCode* _type_code = vnx::search::vnx_native_type_code_SearchEngine_reverse_lookup;
	{
		vnx::write(_out, url_key, _type_code, _type_code->fields[0].code.data());
	}
	_out.flush();
	_argument_data->type_code = _type_code;
	const uint64_t _request_id = vnx_request(_argument_data);
	vnx_queue_reverse_lookup[_request_id] = _callback;
	vnx_num_pending++;
	return _request_id;
}

uint64_t SearchEngineAsyncClient::suggest_domains(const ::std::string& prefix, const ::int32_t& limit, const std::function<void(::std::vector<::std::string>)>& _callback) {
	std::shared_ptr<vnx::Binary> _argument_data = vnx::Binary::create();
	vnx::BinaryOutputStream _stream_out(_argument_data.get());
	vnx::TypeOutput _out(&_stream_out);
	const vnx::TypeCode* _type_code = vnx::search::vnx_native_type_code_SearchEngine_suggest_domains;
	{
		char* const _buf = _out.write(4);
		vnx::write_value(_buf + 0, limit);
		vnx::write(_out, prefix, _type_code, _type_code->fields[0].code.data());
	}
	_out.flush();
	_argument_data->type_code = _type_code;
	const uint64_t _request_id = vnx_request(_argument_data);
	vnx_queue_suggest_domains[_request_id] = _callback;
	vnx_num_pending++;
	return _request_id;
}

uint64_t SearchEngineAsyncClient::suggest_words(const ::std::string& prefix, const ::int32_t& limit, const std::function<void(::std::vector<::std::string>)>& _callback) {
	std::shared_ptr<vnx::Binary> _argument_data = vnx::Binary::create();
	vnx::BinaryOutputStream _stream_out(_argument_data.get());
	vnx::TypeOutput _out(&_stream_out);
	const vnx::TypeCode* _type_code = vnx::search::vnx_native_type_code_SearchEngine_suggest_words;
	{
		char* const _buf = _out.write(4);
		vnx::write_value(_buf + 0, limit);
		vnx::write(_out, prefix, _type_code, _type_code->fields[0].code.data());
	}
	_out.flush();
	_argument_data->type_code = _type_code;
	const uint64_t _request_id = vnx_request(_argument_data);
	vnx_queue_suggest_words[_request_id] = _callback;
	vnx_num_pending++;
	return _request_id;
}

std::vector<uint64_t> SearchEngineAsyncClient::vnx_get_pending_ids() const {
	std::vector<uint64_t> _list;
	for(const auto& entry : vnx_queue_get_domain_info) {
		_list.push_back(entry.first);
	}
	for(const auto& entry : vnx_queue_get_domain_list) {
		_list.push_back(entry.first);
	}
	for(const auto& entry : vnx_queue_get_page_info) {
		_list.push_back(entry.first);
	}
	for(const auto& entry : vnx_queue_handle_vnx_keyvalue_KeyValuePair) {
		_list.push_back(entry.first);
	}
	for(const auto& entry : vnx_queue_handle_vnx_keyvalue_SyncInfo) {
		_list.push_back(entry.first);
	}
	for(const auto& entry : vnx_queue_query) {
		_list.push_back(entry.first);
	}
	for(const auto& entry : vnx_queue_reverse_domain_lookup) {
		_list.push_back(entry.first);
	}
	for(const auto& entry : vnx_queue_reverse_lookup) {
		_list.push_back(entry.first);
	}
	for(const auto& entry : vnx_queue_suggest_domains) {
		_list.push_back(entry.first);
	}
	for(const auto& entry : vnx_queue_suggest_words) {
		_list.push_back(entry.first);
	}
	return _list;
}

void SearchEngineAsyncClient::vnx_purge_request(uint64_t _request_id) {
	vnx_num_pending -= vnx_queue_get_domain_info.erase(_request_id);
	vnx_num_pending -= vnx_queue_get_domain_list.erase(_request_id);
	vnx_num_pending -= vnx_queue_get_page_info.erase(_request_id);
	vnx_num_pending -= vnx_queue_handle_vnx_keyvalue_KeyValuePair.erase(_request_id);
	vnx_num_pending -= vnx_queue_handle_vnx_keyvalue_SyncInfo.erase(_request_id);
	vnx_num_pending -= vnx_queue_query.erase(_request_id);
	vnx_num_pending -= vnx_queue_reverse_domain_lookup.erase(_request_id);
	vnx_num_pending -= vnx_queue_reverse_lookup.erase(_request_id);
	vnx_num_pending -= vnx_queue_suggest_domains.erase(_request_id);
	vnx_num_pending -= vnx_queue_suggest_words.erase(_request_id);
}

void SearchEngineAsyncClient::vnx_callback_switch(uint64_t _request_id, std::shared_ptr<const vnx::Binary> _data) {
	vnx::BinaryInputStream _stream_in(_data.get());
	vnx::TypeInput _in(&_stream_in);
	const vnx::TypeCode* _return_type = _data->type_code;
	
	if(_return_type->type_hash == vnx::Hash64(0xdd84ef2259be7eull)) {
		::vnx::Object _ret_0;
		{
			const char* const _buf = _in.read(_return_type->total_field_size);
			if(_return_type->is_matched) {
			}
			for(const vnx::TypeField* _field : _return_type->ext_fields) {
				switch(_field->native_index) {
					case 0: vnx::read(_in, _ret_0, _return_type, _field->code.data()); break;
					default: vnx::skip(_in, _return_type, _field->code.data());
				}
			}
		}
		auto _iter = vnx_queue_get_domain_info.find(_request_id);
		if(_iter != vnx_queue_get_domain_info.end()) {
			const auto _callback = std::move(_iter->second);
			vnx_queue_get_domain_info.erase(_iter);
			vnx_num_pending--;
			if(_callback) {
				_callback(_ret_0);
			}
		}
	}
	else if(_return_type->type_hash == vnx::Hash64(0xa06392efe70f0679ull)) {
		::std::vector<::vnx::Object> _ret_0;
		{
			const char* const _buf = _in.read(_return_type->total_field_size);
			if(_return_type->is_matched) {
			}
			for(const vnx::TypeField* _field : _return_type->ext_fields) {
				switch(_field->native_index) {
					case 0: vnx::read(_in, _ret_0, _return_type, _field->code.data()); break;
					default: vnx::skip(_in, _return_type, _field->code.data());
				}
			}
		}
		auto _iter = vnx_queue_get_domain_list.find(_request_id);
		if(_iter != vnx_queue_get_domain_list.end()) {
			const auto _callback = std::move(_iter->second);
			vnx_queue_get_domain_list.erase(_iter);
			vnx_num_pending--;
			if(_callback) {
				_callback(_ret_0);
			}
		}
	}
	else if(_return_type->type_hash == vnx::Hash64(0xa79acda144d4c33bull)) {
		::vnx::Object _ret_0;
		{
			const char* const _buf = _in.read(_return_type->total_field_size);
			if(_return_type->is_matched) {
			}
			for(const vnx::TypeField* _field : _return_type->ext_fields) {
				switch(_field->native_index) {
					case 0: vnx::read(_in, _ret_0, _return_type, _field->code.data()); break;
					default: vnx::skip(_in, _return_type, _field->code.data());
				}
			}
		}
		auto _iter = vnx_queue_get_page_info.find(_request_id);
		if(_iter != vnx_queue_get_page_info.end()) {
			const auto _callback = std::move(_iter->second);
			vnx_queue_get_page_info.erase(_iter);
			vnx_num_pending--;
			if(_callback) {
				_callback(_ret_0);
			}
		}
	}
	else if(_return_type->type_hash == vnx::Hash64(0x65dba7428d26148bull)) {
		auto _iter = vnx_queue_handle_vnx_keyvalue_KeyValuePair.find(_request_id);
		if(_iter != vnx_queue_handle_vnx_keyvalue_KeyValuePair.end()) {
			const auto _callback = std::move(_iter->second);
			vnx_queue_handle_vnx_keyvalue_KeyValuePair.erase(_iter);
			vnx_num_pending--;
			if(_callback) {
				_callback();
			}
		}
	}
	else if(_return_type->type_hash == vnx::Hash64(0xac7ffe12b596e74ull)) {
		auto _iter = vnx_queue_handle_vnx_keyvalue_SyncInfo.find(_request_id);
		if(_iter != vnx_queue_handle_vnx_keyvalue_SyncInfo.end()) {
			const auto _callback = std::move(_iter->second);
			vnx_queue_handle_vnx_keyvalue_SyncInfo.erase(_iter);
			vnx_num_pending--;
			if(_callback) {
				_callback();
			}
		}
	}
	else if(_return_type->type_hash == vnx::Hash64(0xc4adbd01e9504960ull)) {
		::std::shared_ptr<const ::vnx::search::SearchResult> _ret_0;
		{
			const char* const _buf = _in.read(_return_type->total_field_size);
			if(_return_type->is_matched) {
			}
			for(const vnx::TypeField* _field : _return_type->ext_fields) {
				switch(_field->native_index) {
					case 0: vnx::read(_in, _ret_0, _return_type, _field->code.data()); break;
					default: vnx::skip(_in, _return_type, _field->code.data());
				}
			}
		}
		auto _iter = vnx_queue_query.find(_request_id);
		if(_iter != vnx_queue_query.end()) {
			const auto _callback = std::move(_iter->second);
			vnx_queue_query.erase(_iter);
			vnx_num_pending--;
			if(_callback) {
				_callback(_ret_0);
			}
		}
	}
	else if(_return_type->type_hash == vnx::Hash64(0x8f0160842cd83465ull)) {
		::std::vector<::std::string> _ret_0;
		{
			const char* const _buf = _in.read(_return_type->total_field_size);
			if(_return_type->is_matched) {
			}
			for(const vnx::TypeField* _field : _return_type->ext_fields) {
				switch(_field->native_index) {
					case 0: vnx::read(_in, _ret_0, _return_type, _field->code.data()); break;
					default: vnx::skip(_in, _return_type, _field->code.data());
				}
			}
		}
		auto _iter = vnx_queue_reverse_domain_lookup.find(_request_id);
		if(_iter != vnx_queue_reverse_domain_lookup.end()) {
			const auto _callback = std::move(_iter->second);
			vnx_queue_reverse_domain_lookup.erase(_iter);
			vnx_num_pending--;
			if(_callback) {
				_callback(_ret_0);
			}
		}
	}
	else if(_return_type->type_hash == vnx::Hash64(0x12b287ac93bf5253ull)) {
		::std::vector<::std::string> _ret_0;
		{
			const char* const _buf = _in.read(_return_type->total_field_size);
			if(_return_type->is_matched) {
			}
			for(const vnx::TypeField* _field : _return_type->ext_fields) {
				switch(_field->native_index) {
					case 0: vnx::read(_in, _ret_0, _return_type, _field->code.data()); break;
					default: vnx::skip(_in, _return_type, _field->code.data());
				}
			}
		}
		auto _iter = vnx_queue_reverse_lookup.find(_request_id);
		if(_iter != vnx_queue_reverse_lookup.end()) {
			const auto _callback = std::move(_iter->second);
			vnx_queue_reverse_lookup.erase(_iter);
			vnx_num_pending--;
			if(_callback) {
				_callback(_ret_0);
			}
		}
	}
	else if(_return_type->type_hash == vnx::Hash64(0x385aae88fe3df753ull)) {
		::std::vector<::std::string> _ret_0;
		{
			const char* const _buf = _in.read(_return_type->total_field_size);
			if(_return_type->is_matched) {
			}
			for(const vnx::TypeField* _field : _return_type->ext_fields) {
				switch(_field->native_index) {
					case 0: vnx::read(_in, _ret_0, _return_type, _field->code.data()); break;
					default: vnx::skip(_in, _return_type, _field->code.data());
				}
			}
		}
		auto _iter = vnx_queue_suggest_domains.find(_request_id);
		if(_iter != vnx_queue_suggest_domains.end()) {
			const auto _callback = std::move(_iter->second);
			vnx_queue_suggest_domains.erase(_iter);
			vnx_num_pending--;
			if(_callback) {
				_callback(_ret_0);
			}
		}
	}
	else if(_return_type->type_hash == vnx::Hash64(0xcf74c35d3594cc90ull)) {
		::std::vector<::std::string> _ret_0;
		{
			const char* const _buf = _in.read(_return_type->total_field_size);
			if(_return_type->is_matched) {
			}
			for(const vnx::TypeField* _field : _return_type->ext_fields) {
				switch(_field->native_index) {
					case 0: vnx::read(_in, _ret_0, _return_type, _field->code.data()); break;
					default: vnx::skip(_in, _return_type, _field->code.data());
				}
			}
		}
		auto _iter = vnx_queue_suggest_words.find(_request_id);
		if(_iter != vnx_queue_suggest_words.end()) {
			const auto _callback = std::move(_iter->second);
			vnx_queue_suggest_words.erase(_iter);
			vnx_num_pending--;
			if(_callback) {
				_callback(_ret_0);
			}
		}
	}
	else {
		throw std::runtime_error("unknown return value");
	}
}


} // namespace vnx
} // namespace search
