
// AUTO GENERATED by vnxcppcodegen

#include <vnx/search/package.hxx>
#include <vnx/search/SearchFrontendBase.hxx>
#include <vnx/NoSuchMethod.hxx>
#include <vnx/Module.h>
#include <vnx/ModuleInterface_vnx_get_config.hxx>
#include <vnx/ModuleInterface_vnx_get_config_return.hxx>
#include <vnx/ModuleInterface_vnx_get_config_object.hxx>
#include <vnx/ModuleInterface_vnx_get_config_object_return.hxx>
#include <vnx/ModuleInterface_vnx_get_module_info.hxx>
#include <vnx/ModuleInterface_vnx_get_module_info_return.hxx>
#include <vnx/ModuleInterface_vnx_get_type_code.hxx>
#include <vnx/ModuleInterface_vnx_get_type_code_return.hxx>
#include <vnx/ModuleInterface_vnx_restart.hxx>
#include <vnx/ModuleInterface_vnx_restart_return.hxx>
#include <vnx/ModuleInterface_vnx_self_test.hxx>
#include <vnx/ModuleInterface_vnx_self_test_return.hxx>
#include <vnx/ModuleInterface_vnx_set_config.hxx>
#include <vnx/ModuleInterface_vnx_set_config_return.hxx>
#include <vnx/ModuleInterface_vnx_set_config_object.hxx>
#include <vnx/ModuleInterface_vnx_set_config_object_return.hxx>
#include <vnx/ModuleInterface_vnx_stop.hxx>
#include <vnx/ModuleInterface_vnx_stop_return.hxx>
#include <vnx/addons/HttpComponent_http_request.hxx>
#include <vnx/addons/HttpComponent_http_request_return.hxx>
#include <vnx/addons/HttpComponent_http_request_chunk.hxx>
#include <vnx/addons/HttpComponent_http_request_chunk_return.hxx>
#include <vnx/addons/HttpRequest.hxx>
#include <vnx/addons/HttpResponse.hxx>
#include <vnx/search/query_options_t.hxx>

#include <vnx/vnx.h>


namespace vnx {
namespace search {


const vnx::Hash64 SearchFrontendBase::VNX_TYPE_HASH(0x7de65cc9f49e8667ull);
const vnx::Hash64 SearchFrontendBase::VNX_CODE_HASH(0xc0bd6787e8fcbcf1ull);

SearchFrontendBase::SearchFrontendBase(const std::string& _vnx_name)
	:	Module::Module(_vnx_name)
{
	vnx::read_config(vnx_name + ".engine_server", engine_server);
	vnx::read_config(vnx_name + ".options", options);
}

vnx::Hash64 SearchFrontendBase::get_type_hash() const {
	return VNX_TYPE_HASH;
}

std::string SearchFrontendBase::get_type_name() const {
	return "vnx.search.SearchFrontend";
}

const vnx::TypeCode* SearchFrontendBase::get_type_code() const {
	return vnx::search::vnx_native_type_code_SearchFrontendBase;
}

void SearchFrontendBase::accept(vnx::Visitor& _visitor) const {
	const vnx::TypeCode* _type_code = vnx::search::vnx_native_type_code_SearchFrontendBase;
	_visitor.type_begin(*_type_code);
	_visitor.type_field(_type_code->fields[0], 0); vnx::accept(_visitor, engine_server);
	_visitor.type_field(_type_code->fields[1], 1); vnx::accept(_visitor, options);
	_visitor.type_end(*_type_code);
}

void SearchFrontendBase::write(std::ostream& _out) const {
	_out << "{";
	_out << "\"engine_server\": "; vnx::write(_out, engine_server);
	_out << ", \"options\": "; vnx::write(_out, options);
	_out << "}";
}

void SearchFrontendBase::read(std::istream& _in) {
	if(auto _json = vnx::read_json(_in)) {
		from_object(_json->to_object());
	}
}

vnx::Object SearchFrontendBase::to_object() const {
	vnx::Object _object;
	_object["__type"] = "vnx.search.SearchFrontend";
	_object["engine_server"] = engine_server;
	_object["options"] = options;
	return _object;
}

void SearchFrontendBase::from_object(const vnx::Object& _object) {
	for(const auto& _entry : _object.field) {
		if(_entry.first == "engine_server") {
			_entry.second.to(engine_server);
		} else if(_entry.first == "options") {
			_entry.second.to(options);
		}
	}
}

vnx::Variant SearchFrontendBase::get_field(const std::string& _name) const {
	if(_name == "engine_server") {
		return vnx::Variant(engine_server);
	}
	if(_name == "options") {
		return vnx::Variant(options);
	}
	return vnx::Variant();
}

void SearchFrontendBase::set_field(const std::string& _name, const vnx::Variant& _value) {
	if(_name == "engine_server") {
		_value.to(engine_server);
	} else if(_name == "options") {
		_value.to(options);
	} else {
		throw std::logic_error("no such field: '" + _name + "'");
	}
}

/// \private
std::ostream& operator<<(std::ostream& _out, const SearchFrontendBase& _value) {
	_value.write(_out);
	return _out;
}

/// \private
std::istream& operator>>(std::istream& _in, SearchFrontendBase& _value) {
	_value.read(_in);
	return _in;
}

const vnx::TypeCode* SearchFrontendBase::static_get_type_code() {
	const vnx::TypeCode* type_code = vnx::get_type_code(VNX_TYPE_HASH);
	if(!type_code) {
		type_code = vnx::register_type_code(static_create_type_code());
	}
	return type_code;
}

std::shared_ptr<vnx::TypeCode> SearchFrontendBase::static_create_type_code() {
	std::shared_ptr<vnx::TypeCode> type_code = std::make_shared<vnx::TypeCode>();
	type_code->name = "vnx.search.SearchFrontend";
	type_code->type_hash = vnx::Hash64(0x7de65cc9f49e8667ull);
	type_code->code_hash = vnx::Hash64(0xc0bd6787e8fcbcf1ull);
	type_code->is_native = true;
	type_code->depends.resize(1);
	type_code->depends[0] = ::vnx::search::query_options_t::static_get_type_code();
	type_code->methods.resize(11);
	type_code->methods[0] = ::vnx::ModuleInterface_vnx_get_config_object::static_get_type_code();
	type_code->methods[1] = ::vnx::ModuleInterface_vnx_get_config::static_get_type_code();
	type_code->methods[2] = ::vnx::ModuleInterface_vnx_set_config_object::static_get_type_code();
	type_code->methods[3] = ::vnx::ModuleInterface_vnx_set_config::static_get_type_code();
	type_code->methods[4] = ::vnx::ModuleInterface_vnx_get_type_code::static_get_type_code();
	type_code->methods[5] = ::vnx::ModuleInterface_vnx_get_module_info::static_get_type_code();
	type_code->methods[6] = ::vnx::ModuleInterface_vnx_restart::static_get_type_code();
	type_code->methods[7] = ::vnx::ModuleInterface_vnx_stop::static_get_type_code();
	type_code->methods[8] = ::vnx::ModuleInterface_vnx_self_test::static_get_type_code();
	type_code->methods[9] = ::vnx::addons::HttpComponent_http_request::static_get_type_code();
	type_code->methods[10] = ::vnx::addons::HttpComponent_http_request_chunk::static_get_type_code();
	type_code->fields.resize(2);
	{
		vnx::TypeField& field = type_code->fields[0];
		field.is_extended = true;
		field.name = "engine_server";
		field.value = vnx::to_string("QueryEngine");
		field.code = {32};
	}
	{
		vnx::TypeField& field = type_code->fields[1];
		field.is_extended = true;
		field.name = "options";
		field.code = {19, 0};
	}
	type_code->build();
	return type_code;
}

void SearchFrontendBase::vnx_handle_switch(std::shared_ptr<const vnx::Sample> _sample) {
}

std::shared_ptr<vnx::Value> SearchFrontendBase::vnx_call_switch(std::shared_ptr<const vnx::Value> _method, const vnx::request_id_t& _request_id) {
	const auto _type_hash = _method->get_type_hash();
	if(_type_hash == vnx::Hash64(0x17f58f68bf83abc0ull)) {
		auto _args = std::dynamic_pointer_cast<const ::vnx::ModuleInterface_vnx_get_config_object>(_method);
		if(!_args) {
			throw std::logic_error("vnx_call_switch(): !_args");
		}
		auto _return_value = ::vnx::ModuleInterface_vnx_get_config_object_return::create();
		_return_value->_ret_0 = vnx_get_config_object();
		return _return_value;
	} else if(_type_hash == vnx::Hash64(0xbbc7f1a01044d294ull)) {
		auto _args = std::dynamic_pointer_cast<const ::vnx::ModuleInterface_vnx_get_config>(_method);
		if(!_args) {
			throw std::logic_error("vnx_call_switch(): !_args");
		}
		auto _return_value = ::vnx::ModuleInterface_vnx_get_config_return::create();
		_return_value->_ret_0 = vnx_get_config(_args->name);
		return _return_value;
	} else if(_type_hash == vnx::Hash64(0xca30f814f17f322full)) {
		auto _args = std::dynamic_pointer_cast<const ::vnx::ModuleInterface_vnx_set_config_object>(_method);
		if(!_args) {
			throw std::logic_error("vnx_call_switch(): !_args");
		}
		auto _return_value = ::vnx::ModuleInterface_vnx_set_config_object_return::create();
		vnx_set_config_object(_args->config);
		return _return_value;
	} else if(_type_hash == vnx::Hash64(0x362aac91373958b7ull)) {
		auto _args = std::dynamic_pointer_cast<const ::vnx::ModuleInterface_vnx_set_config>(_method);
		if(!_args) {
			throw std::logic_error("vnx_call_switch(): !_args");
		}
		auto _return_value = ::vnx::ModuleInterface_vnx_set_config_return::create();
		vnx_set_config(_args->name, _args->value);
		return _return_value;
	} else if(_type_hash == vnx::Hash64(0x305ec4d628960e5dull)) {
		auto _args = std::dynamic_pointer_cast<const ::vnx::ModuleInterface_vnx_get_type_code>(_method);
		if(!_args) {
			throw std::logic_error("vnx_call_switch(): !_args");
		}
		auto _return_value = ::vnx::ModuleInterface_vnx_get_type_code_return::create();
		_return_value->_ret_0 = vnx_get_type_code();
		return _return_value;
	} else if(_type_hash == vnx::Hash64(0xf6d82bdf66d034a1ull)) {
		auto _args = std::dynamic_pointer_cast<const ::vnx::ModuleInterface_vnx_get_module_info>(_method);
		if(!_args) {
			throw std::logic_error("vnx_call_switch(): !_args");
		}
		auto _return_value = ::vnx::ModuleInterface_vnx_get_module_info_return::create();
		_return_value->_ret_0 = vnx_get_module_info();
		return _return_value;
	} else if(_type_hash == vnx::Hash64(0x9e95dc280cecca1bull)) {
		auto _args = std::dynamic_pointer_cast<const ::vnx::ModuleInterface_vnx_restart>(_method);
		if(!_args) {
			throw std::logic_error("vnx_call_switch(): !_args");
		}
		auto _return_value = ::vnx::ModuleInterface_vnx_restart_return::create();
		vnx_restart();
		return _return_value;
	} else if(_type_hash == vnx::Hash64(0x7ab49ce3d1bfc0d2ull)) {
		auto _args = std::dynamic_pointer_cast<const ::vnx::ModuleInterface_vnx_stop>(_method);
		if(!_args) {
			throw std::logic_error("vnx_call_switch(): !_args");
		}
		auto _return_value = ::vnx::ModuleInterface_vnx_stop_return::create();
		vnx_stop();
		return _return_value;
	} else if(_type_hash == vnx::Hash64(0x6ce3775b41a42697ull)) {
		auto _args = std::dynamic_pointer_cast<const ::vnx::ModuleInterface_vnx_self_test>(_method);
		if(!_args) {
			throw std::logic_error("vnx_call_switch(): !_args");
		}
		auto _return_value = ::vnx::ModuleInterface_vnx_self_test_return::create();
		_return_value->_ret_0 = vnx_self_test();
		return _return_value;
	} else if(_type_hash == vnx::Hash64(0xe0b6c38f619bad92ull)) {
		auto _args = std::dynamic_pointer_cast<const ::vnx::addons::HttpComponent_http_request>(_method);
		if(!_args) {
			throw std::logic_error("vnx_call_switch(): !_args");
		}
		http_request_async(_args->request, _args->sub_path, _request_id);
		return 0;
	} else if(_type_hash == vnx::Hash64(0x97e79d08440406d5ull)) {
		auto _args = std::dynamic_pointer_cast<const ::vnx::addons::HttpComponent_http_request_chunk>(_method);
		if(!_args) {
			throw std::logic_error("vnx_call_switch(): !_args");
		}
		http_request_chunk_async(_args->request, _args->sub_path, _args->offset, _args->max_bytes, _request_id);
		return 0;
	}
	auto _ex = vnx::NoSuchMethod::create();
	_ex->dst_mac = vnx_request ? vnx_request->dst_mac : vnx::Hash64();
	_ex->method = _method->get_type_name();
	return _ex;
}

void SearchFrontendBase::http_request_async_return(const vnx::request_id_t& _request_id, const std::shared_ptr<const ::vnx::addons::HttpResponse>& _ret_0) const {
	auto _return_value = ::vnx::addons::HttpComponent_http_request_return::create();
	_return_value->_ret_0 = _ret_0;
	vnx_async_return(_request_id, _return_value);
}

void SearchFrontendBase::http_request_chunk_async_return(const vnx::request_id_t& _request_id, const std::shared_ptr<const ::vnx::addons::HttpResponse>& _ret_0) const {
	auto _return_value = ::vnx::addons::HttpComponent_http_request_chunk_return::create();
	_return_value->_ret_0 = _ret_0;
	vnx_async_return(_request_id, _return_value);
}


} // namespace vnx
} // namespace search


namespace vnx {

void read(TypeInput& in, ::vnx::search::SearchFrontendBase& value, const TypeCode* type_code, const uint16_t* code) {
	if(code) {
		switch(code[0]) {
			case CODE_OBJECT:
			case CODE_ALT_OBJECT: {
				Object tmp;
				vnx::read(in, tmp, type_code, code);
				value.from_object(tmp);
				return;
			}
			case CODE_DYNAMIC:
			case CODE_ALT_DYNAMIC:
				vnx::read_dynamic(in, value);
				return;
		}
	}
	if(!type_code) {
		vnx::skip(in, type_code, code);
		return;
	}
	if(code) {
		switch(code[0]) {
			case CODE_STRUCT: type_code = type_code->depends[code[1]]; break;
			case CODE_ALT_STRUCT: type_code = type_code->depends[vnx::flip_bytes(code[1])]; break;
			default: {
				vnx::skip(in, type_code, code);
				return;
			}
		}
	}
	if(type_code->is_matched) {
	}
	for(const vnx::TypeField* _field : type_code->ext_fields) {
		switch(_field->native_index) {
			case 0: vnx::read(in, value.engine_server, type_code, _field->code.data()); break;
			case 1: vnx::read(in, value.options, type_code, _field->code.data()); break;
			default: vnx::skip(in, type_code, _field->code.data());
		}
	}
}

void write(TypeOutput& out, const ::vnx::search::SearchFrontendBase& value, const TypeCode* type_code, const uint16_t* code) {
	if(code && code[0] == CODE_OBJECT) {
		vnx::write(out, value.to_object(), nullptr, code);
		return;
	}
	if(!type_code || (code && code[0] == CODE_ANY)) {
		type_code = vnx::search::vnx_native_type_code_SearchFrontendBase;
		out.write_type_code(type_code);
		vnx::write_class_header<::vnx::search::SearchFrontendBase>(out);
	}
	else if(code && code[0] == CODE_STRUCT) {
		type_code = type_code->depends[code[1]];
	}
	vnx::write(out, value.engine_server, type_code, type_code->fields[0].code.data());
	vnx::write(out, value.options, type_code, type_code->fields[1].code.data());
}

void read(std::istream& in, ::vnx::search::SearchFrontendBase& value) {
	value.read(in);
}

void write(std::ostream& out, const ::vnx::search::SearchFrontendBase& value) {
	value.write(out);
}

void accept(Visitor& visitor, const ::vnx::search::SearchFrontendBase& value) {
	value.accept(visitor);
}

} // vnx
