
// AUTO GENERATED by vnxcppcodegen

#include <vnx/search/package.hxx>
#include <vnx/search/SearchInterfaceClient.hxx>
#include <vnx/Object.hpp>
#include <vnx/search/SearchInterface_get_domain_info.hxx>
#include <vnx/search/SearchInterface_get_domain_info_return.hxx>
#include <vnx/search/SearchInterface_get_domain_list.hxx>
#include <vnx/search/SearchInterface_get_domain_list_return.hxx>
#include <vnx/search/SearchInterface_get_page_info.hxx>
#include <vnx/search/SearchInterface_get_page_info_return.hxx>
#include <vnx/search/SearchInterface_get_page_ranking.hxx>
#include <vnx/search/SearchInterface_get_page_ranking_return.hxx>
#include <vnx/search/SearchInterface_get_page_ranks.hxx>
#include <vnx/search/SearchInterface_get_page_ranks_return.hxx>
#include <vnx/search/SearchInterface_get_word_context.hxx>
#include <vnx/search/SearchInterface_get_word_context_return.hxx>
#include <vnx/search/SearchInterface_reverse_domain_lookup.hxx>
#include <vnx/search/SearchInterface_reverse_domain_lookup_return.hxx>
#include <vnx/search/SearchInterface_reverse_lookup.hxx>
#include <vnx/search/SearchInterface_reverse_lookup_return.hxx>
#include <vnx/search/SearchInterface_suggest_words.hxx>
#include <vnx/search/SearchInterface_suggest_words_return.hxx>

#include <vnx/Generic.hxx>
#include <vnx/vnx.h>


namespace vnx {
namespace search {

SearchInterfaceClient::SearchInterfaceClient(const std::string& service_name)
	:	Client::Client(vnx::Hash64(service_name))
{
}

SearchInterfaceClient::SearchInterfaceClient(vnx::Hash64 service_addr)
	:	Client::Client(service_addr)
{
}

::vnx::Object SearchInterfaceClient::get_domain_info(const std::string& host, const int32_t& limit, const uint32_t& offset) {
	auto _method = ::vnx::search::SearchInterface_get_domain_info::create();
	_method->host = host;
	_method->limit = limit;
	_method->offset = offset;
	auto _return_value = vnx_request(_method, false);
	if(auto _result = std::dynamic_pointer_cast<const ::vnx::search::SearchInterface_get_domain_info_return>(_return_value)) {
		return _result->_ret_0;
	} else if(_return_value && !_return_value->is_void()) {
		return _return_value->get_field_by_index(0).to<::vnx::Object>();
	} else {
		throw std::logic_error("SearchInterfaceClient: invalid return value");
	}
}

::vnx::Object SearchInterfaceClient::get_page_info(const std::string& url_key) {
	auto _method = ::vnx::search::SearchInterface_get_page_info::create();
	_method->url_key = url_key;
	auto _return_value = vnx_request(_method, false);
	if(auto _result = std::dynamic_pointer_cast<const ::vnx::search::SearchInterface_get_page_info_return>(_return_value)) {
		return _result->_ret_0;
	} else if(_return_value && !_return_value->is_void()) {
		return _return_value->get_field_by_index(0).to<::vnx::Object>();
	} else {
		throw std::logic_error("SearchInterfaceClient: invalid return value");
	}
}

std::vector<vnx::float32_t> SearchInterfaceClient::get_page_ranks(const std::vector<std::string>& url_keys, const vnx::bool_t& direct) {
	auto _method = ::vnx::search::SearchInterface_get_page_ranks::create();
	_method->url_keys = url_keys;
	_method->direct = direct;
	auto _return_value = vnx_request(_method, false);
	if(auto _result = std::dynamic_pointer_cast<const ::vnx::search::SearchInterface_get_page_ranks_return>(_return_value)) {
		return _result->_ret_0;
	} else if(_return_value && !_return_value->is_void()) {
		return _return_value->get_field_by_index(0).to<std::vector<vnx::float32_t>>();
	} else {
		throw std::logic_error("SearchInterfaceClient: invalid return value");
	}
}

std::vector<::vnx::Object> SearchInterfaceClient::get_domain_list(const int32_t& limit, const uint32_t& offset) {
	auto _method = ::vnx::search::SearchInterface_get_domain_list::create();
	_method->limit = limit;
	_method->offset = offset;
	auto _return_value = vnx_request(_method, false);
	if(auto _result = std::dynamic_pointer_cast<const ::vnx::search::SearchInterface_get_domain_list_return>(_return_value)) {
		return _result->_ret_0;
	} else if(_return_value && !_return_value->is_void()) {
		return _return_value->get_field_by_index(0).to<std::vector<::vnx::Object>>();
	} else {
		throw std::logic_error("SearchInterfaceClient: invalid return value");
	}
}

std::vector<std::pair<std::string, vnx::float32_t>> SearchInterfaceClient::get_page_ranking(const int32_t& limit, const uint32_t& offset) {
	auto _method = ::vnx::search::SearchInterface_get_page_ranking::create();
	_method->limit = limit;
	_method->offset = offset;
	auto _return_value = vnx_request(_method, false);
	if(auto _result = std::dynamic_pointer_cast<const ::vnx::search::SearchInterface_get_page_ranking_return>(_return_value)) {
		return _result->_ret_0;
	} else if(_return_value && !_return_value->is_void()) {
		return _return_value->get_field_by_index(0).to<std::vector<std::pair<std::string, vnx::float32_t>>>();
	} else {
		throw std::logic_error("SearchInterfaceClient: invalid return value");
	}
}

std::vector<std::pair<std::string, vnx::float32_t>> SearchInterfaceClient::get_word_context(const std::string& word, const int32_t& limit, const uint32_t& offset) {
	auto _method = ::vnx::search::SearchInterface_get_word_context::create();
	_method->word = word;
	_method->limit = limit;
	_method->offset = offset;
	auto _return_value = vnx_request(_method, false);
	if(auto _result = std::dynamic_pointer_cast<const ::vnx::search::SearchInterface_get_word_context_return>(_return_value)) {
		return _result->_ret_0;
	} else if(_return_value && !_return_value->is_void()) {
		return _return_value->get_field_by_index(0).to<std::vector<std::pair<std::string, vnx::float32_t>>>();
	} else {
		throw std::logic_error("SearchInterfaceClient: invalid return value");
	}
}

std::vector<std::pair<std::string, vnx::float32_t>> SearchInterfaceClient::reverse_lookup(const std::string& url_key, const int32_t& limit, const uint32_t& offset) {
	auto _method = ::vnx::search::SearchInterface_reverse_lookup::create();
	_method->url_key = url_key;
	_method->limit = limit;
	_method->offset = offset;
	auto _return_value = vnx_request(_method, false);
	if(auto _result = std::dynamic_pointer_cast<const ::vnx::search::SearchInterface_reverse_lookup_return>(_return_value)) {
		return _result->_ret_0;
	} else if(_return_value && !_return_value->is_void()) {
		return _return_value->get_field_by_index(0).to<std::vector<std::pair<std::string, vnx::float32_t>>>();
	} else {
		throw std::logic_error("SearchInterfaceClient: invalid return value");
	}
}

std::vector<std::pair<std::string, uint32_t>> SearchInterfaceClient::reverse_domain_lookup(const std::string& url_key, const int32_t& limit, const uint32_t& offset) {
	auto _method = ::vnx::search::SearchInterface_reverse_domain_lookup::create();
	_method->url_key = url_key;
	_method->limit = limit;
	_method->offset = offset;
	auto _return_value = vnx_request(_method, false);
	if(auto _result = std::dynamic_pointer_cast<const ::vnx::search::SearchInterface_reverse_domain_lookup_return>(_return_value)) {
		return _result->_ret_0;
	} else if(_return_value && !_return_value->is_void()) {
		return _return_value->get_field_by_index(0).to<std::vector<std::pair<std::string, uint32_t>>>();
	} else {
		throw std::logic_error("SearchInterfaceClient: invalid return value");
	}
}

std::vector<std::pair<std::string, uint32_t>> SearchInterfaceClient::suggest_words(const std::string& prefix, const int32_t& limit) {
	auto _method = ::vnx::search::SearchInterface_suggest_words::create();
	_method->prefix = prefix;
	_method->limit = limit;
	auto _return_value = vnx_request(_method, false);
	if(auto _result = std::dynamic_pointer_cast<const ::vnx::search::SearchInterface_suggest_words_return>(_return_value)) {
		return _result->_ret_0;
	} else if(_return_value && !_return_value->is_void()) {
		return _return_value->get_field_by_index(0).to<std::vector<std::pair<std::string, uint32_t>>>();
	} else {
		throw std::logic_error("SearchInterfaceClient: invalid return value");
	}
}


} // namespace vnx
} // namespace search
