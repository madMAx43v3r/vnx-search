
// AUTO GENERATED by vnxcppcodegen

#include <vnx/search/package.hxx>
#include <vnx/search/CrawlProcessorBase.hxx>
#include <vnx/Input.h>
#include <vnx/Output.h>
#include <vnx/Visitor.h>
#include <vnx/Object.h>
#include <vnx/Struct.h>
#include <vnx/Config.h>
#include <vnx/Binary.h>
#include <vnx/NoSuchMethod.hxx>


namespace vnx {
namespace search {


const vnx::Hash64 CrawlProcessorBase::VNX_TYPE_HASH(0x508848d1f9d97d9full);
const vnx::Hash64 CrawlProcessorBase::VNX_CODE_HASH(0xf18cc6215721da20ull);

CrawlProcessorBase::CrawlProcessorBase(const std::string& _vnx_name)
	:	Module::Module(_vnx_name)
{
	vnx::read_config(vnx_name + ".max_per_domain", max_per_domain);
	vnx::read_config(vnx_name + ".max_per_minute", max_per_minute);
}

vnx::Hash64 CrawlProcessorBase::get_type_hash() const {
	return VNX_TYPE_HASH;
}

const char* CrawlProcessorBase::get_type_name() const {
	return "vnx.search.CrawlProcessor";
}
const vnx::TypeCode* CrawlProcessorBase::get_type_code() const {
	return vnx::search::vnx_native_type_code_CrawlProcessor;
}

void CrawlProcessorBase::accept(vnx::Visitor& _visitor) const {
	const vnx::TypeCode* _type_code = vnx::search::vnx_native_type_code_CrawlProcessor;
	_visitor.type_begin(*_type_code);
	_visitor.type_field(_type_code->fields[0], 0); vnx::accept(_visitor, max_per_domain);
	_visitor.type_field(_type_code->fields[1], 1); vnx::accept(_visitor, max_per_minute);
	_visitor.type_end(*_type_code);
}

void CrawlProcessorBase::write(std::ostream& _out) const {
	_out << "{";
	_out << "\"max_per_domain\": "; vnx::write(_out, max_per_domain);
	_out << ", \"max_per_minute\": "; vnx::write(_out, max_per_minute);
	_out << "}";
}

void CrawlProcessorBase::read(std::istream& _in) {
	std::map<std::string, std::string> _object;
	vnx::read_object(_in, _object);
	for(const auto& _entry : _object) {
		if(_entry.first == "max_per_domain") {
			vnx::from_string(_entry.second, max_per_domain);
		} else if(_entry.first == "max_per_minute") {
			vnx::from_string(_entry.second, max_per_minute);
		}
	}
}

vnx::Object CrawlProcessorBase::to_object() const {
	vnx::Object _object;
	_object["max_per_domain"] = max_per_domain;
	_object["max_per_minute"] = max_per_minute;
	return _object;
}

void CrawlProcessorBase::from_object(const vnx::Object& _object) {
	for(const auto& _entry : _object.field) {
		if(_entry.first == "max_per_domain") {
			_entry.second.to(max_per_domain);
		} else if(_entry.first == "max_per_minute") {
			_entry.second.to(max_per_minute);
		}
	}
}

/// \private
std::ostream& operator<<(std::ostream& _out, const CrawlProcessorBase& _value) {
	_value.write(_out);
	return _out;
}

/// \private
std::istream& operator>>(std::istream& _in, CrawlProcessorBase& _value) {
	_value.read(_in);
	return _in;
}

const vnx::TypeCode* CrawlProcessorBase::static_get_type_code() {
	const vnx::TypeCode* type_code = vnx::get_type_code(vnx::Hash64(0x508848d1f9d97d9full));
	if(!type_code) {
		type_code = vnx::register_type_code(static_create_type_code());
	}
	return type_code;
}

std::shared_ptr<vnx::TypeCode> CrawlProcessorBase::static_create_type_code() {
	std::shared_ptr<vnx::TypeCode> type_code = std::make_shared<vnx::TypeCode>(true);
	type_code->name = "vnx.search.CrawlProcessor";
	type_code->type_hash = vnx::Hash64(0x508848d1f9d97d9full);
	type_code->code_hash = vnx::Hash64(0xf18cc6215721da20ull);
	type_code->methods.resize(0);
	type_code->fields.resize(2);
	{
		vnx::TypeField& field = type_code->fields[0];
		field.name = "max_per_domain";
		field.value = vnx::to_string(2);
		field.code = {7};
	}
	{
		vnx::TypeField& field = type_code->fields[1];
		field.name = "max_per_minute";
		field.value = vnx::to_string(120);
		field.code = {7};
	}
	type_code->build();
	return type_code;
}

void CrawlProcessorBase::vnx_handle_switch(std::shared_ptr<const ::vnx::Sample> _sample) {
	const uint64_t _type_hash = _sample->value->get_type_hash();
}

std::shared_ptr<vnx::Value> CrawlProcessorBase::vnx_call_switch(vnx::TypeInput& _in, const vnx::TypeCode* _call_type, const vnx::request_id_t& _request_id) {
	auto _ex = vnx::NoSuchMethod::create();
	_ex->method = _call_type->name;
	return _ex;
}


} // namespace vnx
} // namespace search


namespace vnx {

void read(TypeInput& in, ::vnx::search::CrawlProcessorBase& value, const TypeCode* type_code, const uint16_t* code) {
	if(!type_code) {
		throw std::logic_error("read(): type_code == 0");
	}
	if(code) {
		switch(code[0]) {
			case CODE_STRUCT: type_code = type_code->depends[code[1]]; break;
			case CODE_ALT_STRUCT: type_code = type_code->depends[vnx::flip_bytes(code[1])]; break;
			default: vnx::skip(in, type_code, code); return;
		}
	}
	const char* const _buf = in.read(type_code->total_field_size);
	if(type_code->is_matched) {
		{
			const vnx::TypeField* const _field = type_code->field_map[0];
			if(_field) {
				vnx::read_value(_buf + _field->offset, value.max_per_domain, _field->code.data());
			}
		}
		{
			const vnx::TypeField* const _field = type_code->field_map[1];
			if(_field) {
				vnx::read_value(_buf + _field->offset, value.max_per_minute, _field->code.data());
			}
		}
	}
	for(const vnx::TypeField* _field : type_code->ext_fields) {
		switch(_field->native_index) {
			default: vnx::skip(in, type_code, _field->code.data());
		}
	}
}

void write(TypeOutput& out, const ::vnx::search::CrawlProcessorBase& value, const TypeCode* type_code, const uint16_t* code) {
	if(!type_code || (code && code[0] == CODE_ANY)) {
		type_code = vnx::search::vnx_native_type_code_CrawlProcessor;
		out.write_type_code(type_code);
		vnx::write_class_header<::vnx::search::CrawlProcessorBase>(out);
	}
	if(code && code[0] == CODE_STRUCT) {
		type_code = type_code->depends[code[1]];
	}
	char* const _buf = out.write(8);
	vnx::write_value(_buf + 0, value.max_per_domain);
	vnx::write_value(_buf + 4, value.max_per_minute);
}

void read(std::istream& in, ::vnx::search::CrawlProcessorBase& value) {
	value.read(in);
}

void write(std::ostream& out, const ::vnx::search::CrawlProcessorBase& value) {
	value.write(out);
}

void accept(Visitor& visitor, const ::vnx::search::CrawlProcessorBase& value) {
	value.accept(visitor);
}

} // vnx
