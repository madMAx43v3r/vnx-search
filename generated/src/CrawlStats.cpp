
// AUTO GENERATED by vnxcppcodegen

#include <vnx/search/package.hxx>
#include <vnx/search/CrawlStats.hxx>
#include <vnx/Input.h>
#include <vnx/Output.h>
#include <vnx/Visitor.h>
#include <vnx/Object.h>
#include <vnx/Struct.h>


namespace vnx {
namespace search {


const vnx::Hash64 CrawlStats::VNX_TYPE_HASH(0x1c9c8e69ae389c30ull);
const vnx::Hash64 CrawlStats::VNX_CODE_HASH(0x262a3dd1d94ca3fbull);

vnx::Hash64 CrawlStats::get_type_hash() const {
	return VNX_TYPE_HASH;
}

const char* CrawlStats::get_type_name() const {
	return "vnx.search.CrawlStats";
}
const vnx::TypeCode* CrawlStats::get_type_code() const {
	return vnx::search::vnx_native_type_code_CrawlStats;
}

std::shared_ptr<CrawlStats> CrawlStats::create() {
	return std::make_shared<CrawlStats>();
}

std::shared_ptr<vnx::Value> CrawlStats::clone() const {
	return std::make_shared<CrawlStats>(*this);
}

void CrawlStats::read(vnx::TypeInput& _in, const vnx::TypeCode* _type_code, const uint16_t* _code) {
	vnx::read(_in, *this, _type_code, _code);
}

void CrawlStats::write(vnx::TypeOutput& _out, const vnx::TypeCode* _type_code, const uint16_t* _code) const {
	vnx::write(_out, *this, _type_code, _code);
}

void CrawlStats::accept(vnx::Visitor& _visitor) const {
	const vnx::TypeCode* _type_code = vnx::search::vnx_native_type_code_CrawlStats;
	_visitor.type_begin(*_type_code);
	_visitor.type_field(_type_code->fields[0], 0); vnx::accept(_visitor, num_fetched);
	_visitor.type_field(_type_code->fields[1], 1); vnx::accept(_visitor, num_errors);
	_visitor.type_field(_type_code->fields[2], 2); vnx::accept(_visitor, num_reload);
	_visitor.type_field(_type_code->fields[3], 3); vnx::accept(_visitor, num_domains);
	_visitor.type_field(_type_code->fields[4], 4); vnx::accept(_visitor, num_queued);
	_visitor.type_field(_type_code->fields[5], 5); vnx::accept(_visitor, num_waiting);
	_visitor.type_field(_type_code->fields[6], 6); vnx::accept(_visitor, most_fetched);
	_visitor.type_field(_type_code->fields[7], 7); vnx::accept(_visitor, most_queued);
	_visitor.type_end(*_type_code);
}

void CrawlStats::write(std::ostream& _out) const {
	_out << "{";
	_out << "\"num_fetched\": "; vnx::write(_out, num_fetched);
	_out << ", \"num_errors\": "; vnx::write(_out, num_errors);
	_out << ", \"num_reload\": "; vnx::write(_out, num_reload);
	_out << ", \"num_domains\": "; vnx::write(_out, num_domains);
	_out << ", \"num_queued\": "; vnx::write(_out, num_queued);
	_out << ", \"num_waiting\": "; vnx::write(_out, num_waiting);
	_out << ", \"most_fetched\": "; vnx::write(_out, most_fetched);
	_out << ", \"most_queued\": "; vnx::write(_out, most_queued);
	_out << "}";
}

void CrawlStats::read(std::istream& _in) {
	std::map<std::string, std::string> _object;
	vnx::read_object(_in, _object);
	for(const auto& _entry : _object) {
		if(_entry.first == "most_fetched") {
			vnx::from_string(_entry.second, most_fetched);
		} else if(_entry.first == "most_queued") {
			vnx::from_string(_entry.second, most_queued);
		} else if(_entry.first == "num_domains") {
			vnx::from_string(_entry.second, num_domains);
		} else if(_entry.first == "num_errors") {
			vnx::from_string(_entry.second, num_errors);
		} else if(_entry.first == "num_fetched") {
			vnx::from_string(_entry.second, num_fetched);
		} else if(_entry.first == "num_queued") {
			vnx::from_string(_entry.second, num_queued);
		} else if(_entry.first == "num_reload") {
			vnx::from_string(_entry.second, num_reload);
		} else if(_entry.first == "num_waiting") {
			vnx::from_string(_entry.second, num_waiting);
		}
	}
}

vnx::Object CrawlStats::to_object() const {
	vnx::Object _object;
	_object["num_fetched"] = num_fetched;
	_object["num_errors"] = num_errors;
	_object["num_reload"] = num_reload;
	_object["num_domains"] = num_domains;
	_object["num_queued"] = num_queued;
	_object["num_waiting"] = num_waiting;
	_object["most_fetched"] = most_fetched;
	_object["most_queued"] = most_queued;
	return _object;
}

void CrawlStats::from_object(const vnx::Object& _object) {
	for(const auto& _entry : _object.field) {
		if(_entry.first == "most_fetched") {
			_entry.second.to(most_fetched);
		} else if(_entry.first == "most_queued") {
			_entry.second.to(most_queued);
		} else if(_entry.first == "num_domains") {
			_entry.second.to(num_domains);
		} else if(_entry.first == "num_errors") {
			_entry.second.to(num_errors);
		} else if(_entry.first == "num_fetched") {
			_entry.second.to(num_fetched);
		} else if(_entry.first == "num_queued") {
			_entry.second.to(num_queued);
		} else if(_entry.first == "num_reload") {
			_entry.second.to(num_reload);
		} else if(_entry.first == "num_waiting") {
			_entry.second.to(num_waiting);
		}
	}
}

/// \private
std::ostream& operator<<(std::ostream& _out, const CrawlStats& _value) {
	_value.write(_out);
	return _out;
}

/// \private
std::istream& operator>>(std::istream& _in, CrawlStats& _value) {
	_value.read(_in);
	return _in;
}

const vnx::TypeCode* CrawlStats::static_get_type_code() {
	const vnx::TypeCode* type_code = vnx::get_type_code(vnx::Hash64(0x1c9c8e69ae389c30ull));
	if(!type_code) {
		type_code = vnx::register_type_code(static_create_type_code());
	}
	return type_code;
}

std::shared_ptr<vnx::TypeCode> CrawlStats::static_create_type_code() {
	std::shared_ptr<vnx::TypeCode> type_code = std::make_shared<vnx::TypeCode>(true);
	type_code->name = "vnx.search.CrawlStats";
	type_code->type_hash = vnx::Hash64(0x1c9c8e69ae389c30ull);
	type_code->code_hash = vnx::Hash64(0x262a3dd1d94ca3fbull);
	type_code->is_class = true;
	type_code->create_value = []() -> std::shared_ptr<vnx::Value> { return std::make_shared<CrawlStats>(); };
	type_code->depends.resize(1);
	type_code->depends[0] = ::vnx::search::crawl_domain_stats_t::static_get_type_code();
	type_code->methods.resize(0);
	type_code->fields.resize(8);
	{
		vnx::TypeField& field = type_code->fields[0];
		field.name = "num_fetched";
		field.code = {8};
	}
	{
		vnx::TypeField& field = type_code->fields[1];
		field.name = "num_errors";
		field.code = {8};
	}
	{
		vnx::TypeField& field = type_code->fields[2];
		field.name = "num_reload";
		field.code = {8};
	}
	{
		vnx::TypeField& field = type_code->fields[3];
		field.name = "num_domains";
		field.code = {8};
	}
	{
		vnx::TypeField& field = type_code->fields[4];
		field.name = "num_queued";
		field.code = {8};
	}
	{
		vnx::TypeField& field = type_code->fields[5];
		field.name = "num_waiting";
		field.code = {8};
	}
	{
		vnx::TypeField& field = type_code->fields[6];
		field.is_extended = true;
		field.name = "most_fetched";
		field.code = {12, 19, 0};
	}
	{
		vnx::TypeField& field = type_code->fields[7];
		field.is_extended = true;
		field.name = "most_queued";
		field.code = {12, 19, 0};
	}
	type_code->build();
	return type_code;
}


} // namespace vnx
} // namespace search


namespace vnx {

void read(TypeInput& in, ::vnx::search::CrawlStats& value, const TypeCode* type_code, const uint16_t* code) {
	if(!type_code) {
		throw std::logic_error("read(): type_code == 0");
	}
	if(code) {
		switch(code[0]) {
			case CODE_STRUCT: type_code = type_code->depends[code[1]]; break;
			case CODE_ALT_STRUCT: type_code = type_code->depends[vnx::flip_bytes(code[1])]; break;
			default: vnx::skip(in, type_code, code); return;
		}
	}
	const char* const _buf = in.read(type_code->total_field_size);
	if(type_code->is_matched) {
		{
			const vnx::TypeField* const _field = type_code->field_map[0];
			if(_field) {
				vnx::read_value(_buf + _field->offset, value.num_fetched, _field->code.data());
			}
		}
		{
			const vnx::TypeField* const _field = type_code->field_map[1];
			if(_field) {
				vnx::read_value(_buf + _field->offset, value.num_errors, _field->code.data());
			}
		}
		{
			const vnx::TypeField* const _field = type_code->field_map[2];
			if(_field) {
				vnx::read_value(_buf + _field->offset, value.num_reload, _field->code.data());
			}
		}
		{
			const vnx::TypeField* const _field = type_code->field_map[3];
			if(_field) {
				vnx::read_value(_buf + _field->offset, value.num_domains, _field->code.data());
			}
		}
		{
			const vnx::TypeField* const _field = type_code->field_map[4];
			if(_field) {
				vnx::read_value(_buf + _field->offset, value.num_queued, _field->code.data());
			}
		}
		{
			const vnx::TypeField* const _field = type_code->field_map[5];
			if(_field) {
				vnx::read_value(_buf + _field->offset, value.num_waiting, _field->code.data());
			}
		}
	}
	for(const vnx::TypeField* _field : type_code->ext_fields) {
		switch(_field->native_index) {
			case 6: vnx::read(in, value.most_fetched, type_code, _field->code.data()); break;
			case 7: vnx::read(in, value.most_queued, type_code, _field->code.data()); break;
			default: vnx::skip(in, type_code, _field->code.data());
		}
	}
}

void write(TypeOutput& out, const ::vnx::search::CrawlStats& value, const TypeCode* type_code, const uint16_t* code) {
	if(!type_code || (code && code[0] == CODE_ANY)) {
		type_code = vnx::search::vnx_native_type_code_CrawlStats;
		out.write_type_code(type_code);
		vnx::write_class_header<::vnx::search::CrawlStats>(out);
	}
	if(code && code[0] == CODE_STRUCT) {
		type_code = type_code->depends[code[1]];
	}
	char* const _buf = out.write(48);
	vnx::write_value(_buf + 0, value.num_fetched);
	vnx::write_value(_buf + 8, value.num_errors);
	vnx::write_value(_buf + 16, value.num_reload);
	vnx::write_value(_buf + 24, value.num_domains);
	vnx::write_value(_buf + 32, value.num_queued);
	vnx::write_value(_buf + 40, value.num_waiting);
	vnx::write(out, value.most_fetched, type_code, type_code->fields[6].code.data());
	vnx::write(out, value.most_queued, type_code, type_code->fields[7].code.data());
}

void read(std::istream& in, ::vnx::search::CrawlStats& value) {
	value.read(in);
}

void write(std::ostream& out, const ::vnx::search::CrawlStats& value) {
	value.write(out);
}

void accept(Visitor& visitor, const ::vnx::search::CrawlStats& value) {
	value.accept(visitor);
}

} // vnx
