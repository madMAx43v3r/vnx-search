
// AUTO GENERATED by vnxcppcodegen

#include <vnx/search/package.hxx>
#include <vnx/search/SearchEngineClient.hxx>
#include <vnx/Module.h>
#include <vnx/ModuleInterface_vnx_close.hxx>
#include <vnx/ModuleInterface_vnx_close_return.hxx>
#include <vnx/ModuleInterface_vnx_get_config.hxx>
#include <vnx/ModuleInterface_vnx_get_config_object.hxx>
#include <vnx/ModuleInterface_vnx_get_config_object_return.hxx>
#include <vnx/ModuleInterface_vnx_get_config_return.hxx>
#include <vnx/ModuleInterface_vnx_get_type_code.hxx>
#include <vnx/ModuleInterface_vnx_get_type_code_return.hxx>
#include <vnx/ModuleInterface_vnx_restart.hxx>
#include <vnx/ModuleInterface_vnx_restart_return.hxx>
#include <vnx/ModuleInterface_vnx_set_config.hxx>
#include <vnx/ModuleInterface_vnx_set_config_object.hxx>
#include <vnx/ModuleInterface_vnx_set_config_object_return.hxx>
#include <vnx/ModuleInterface_vnx_set_config_return.hxx>
#include <vnx/Object.hpp>
#include <vnx/TopicPtr.hpp>
#include <vnx/keyvalue/SyncInfo.hxx>
#include <vnx/keyvalue/SyncUpdate.hxx>
#include <vnx/search/SearchEngine_get_page_entries.hxx>
#include <vnx/search/SearchEngine_get_page_entries_return.hxx>
#include <vnx/search/SearchInterface_get_domain_info.hxx>
#include <vnx/search/SearchInterface_get_domain_info_return.hxx>
#include <vnx/search/SearchInterface_get_domain_list.hxx>
#include <vnx/search/SearchInterface_get_domain_list_return.hxx>
#include <vnx/search/SearchInterface_get_page_info.hxx>
#include <vnx/search/SearchInterface_get_page_info_return.hxx>
#include <vnx/search/SearchInterface_get_page_ranks.hxx>
#include <vnx/search/SearchInterface_get_page_ranks_return.hxx>
#include <vnx/search/SearchInterface_reverse_domain_lookup.hxx>
#include <vnx/search/SearchInterface_reverse_domain_lookup_return.hxx>
#include <vnx/search/SearchInterface_reverse_lookup.hxx>
#include <vnx/search/SearchInterface_reverse_lookup_return.hxx>
#include <vnx/search/SearchInterface_suggest_domains.hxx>
#include <vnx/search/SearchInterface_suggest_domains_return.hxx>
#include <vnx/search/SearchInterface_suggest_words.hxx>
#include <vnx/search/SearchInterface_suggest_words_return.hxx>
#include <vnx/search/page_entry_t.hxx>

#include <vnx/vnx.h>


namespace vnx {
namespace search {

SearchEngineClient::SearchEngineClient(const std::string& service_name)
	:	Client::Client(vnx::Hash64(service_name))
{
}

SearchEngineClient::SearchEngineClient(vnx::Hash64 service_addr)
	:	Client::Client(service_addr)
{
}

::vnx::Object SearchEngineClient::vnx_get_config_object() {
	auto _method = ::vnx::ModuleInterface_vnx_get_config_object::create();
	auto _return_value = vnx_request(_method, false);
	auto _result = std::dynamic_pointer_cast<const ::vnx::ModuleInterface_vnx_get_config_object_return>(_return_value);
	if(!_result) {
		throw std::logic_error("SearchEngineClient: !_result");
	}
	return _result->_ret_0;
}

::vnx::Variant SearchEngineClient::vnx_get_config(const std::string& name) {
	auto _method = ::vnx::ModuleInterface_vnx_get_config::create();
	_method->name = name;
	auto _return_value = vnx_request(_method, false);
	auto _result = std::dynamic_pointer_cast<const ::vnx::ModuleInterface_vnx_get_config_return>(_return_value);
	if(!_result) {
		throw std::logic_error("SearchEngineClient: !_result");
	}
	return _result->_ret_0;
}

void SearchEngineClient::vnx_set_config_object(const ::vnx::Object& config) {
	auto _method = ::vnx::ModuleInterface_vnx_set_config_object::create();
	_method->config = config;
	vnx_request(_method, false);
}

void SearchEngineClient::vnx_set_config_object_async(const ::vnx::Object& config) {
	auto _method = ::vnx::ModuleInterface_vnx_set_config_object::create();
	_method->config = config;
	vnx_request(_method, true);
}

void SearchEngineClient::vnx_set_config(const std::string& name, const ::vnx::Variant& value) {
	auto _method = ::vnx::ModuleInterface_vnx_set_config::create();
	_method->name = name;
	_method->value = value;
	vnx_request(_method, false);
}

void SearchEngineClient::vnx_set_config_async(const std::string& name, const ::vnx::Variant& value) {
	auto _method = ::vnx::ModuleInterface_vnx_set_config::create();
	_method->name = name;
	_method->value = value;
	vnx_request(_method, true);
}

::vnx::TypeCode SearchEngineClient::vnx_get_type_code() {
	auto _method = ::vnx::ModuleInterface_vnx_get_type_code::create();
	auto _return_value = vnx_request(_method, false);
	auto _result = std::dynamic_pointer_cast<const ::vnx::ModuleInterface_vnx_get_type_code_return>(_return_value);
	if(!_result) {
		throw std::logic_error("SearchEngineClient: !_result");
	}
	return _result->_ret_0;
}

void SearchEngineClient::vnx_restart() {
	auto _method = ::vnx::ModuleInterface_vnx_restart::create();
	vnx_request(_method, false);
}

void SearchEngineClient::vnx_restart_async() {
	auto _method = ::vnx::ModuleInterface_vnx_restart::create();
	vnx_request(_method, true);
}

void SearchEngineClient::vnx_close() {
	auto _method = ::vnx::ModuleInterface_vnx_close::create();
	vnx_request(_method, false);
}

void SearchEngineClient::vnx_close_async() {
	auto _method = ::vnx::ModuleInterface_vnx_close::create();
	vnx_request(_method, true);
}

std::vector<::vnx::search::page_entry_t> SearchEngineClient::get_page_entries(const std::vector<uint32_t>& page_ids) {
	auto _method = ::vnx::search::SearchEngine_get_page_entries::create();
	_method->page_ids = page_ids;
	auto _return_value = vnx_request(_method, false);
	auto _result = std::dynamic_pointer_cast<const ::vnx::search::SearchEngine_get_page_entries_return>(_return_value);
	if(!_result) {
		throw std::logic_error("SearchEngineClient: !_result");
	}
	return _result->_ret_0;
}

::vnx::Object SearchEngineClient::get_domain_info(const std::string& host, const int32_t& limit, const uint32_t& offset) {
	auto _method = ::vnx::search::SearchInterface_get_domain_info::create();
	_method->host = host;
	_method->limit = limit;
	_method->offset = offset;
	auto _return_value = vnx_request(_method, false);
	auto _result = std::dynamic_pointer_cast<const ::vnx::search::SearchInterface_get_domain_info_return>(_return_value);
	if(!_result) {
		throw std::logic_error("SearchEngineClient: !_result");
	}
	return _result->_ret_0;
}

::vnx::Object SearchEngineClient::get_page_info(const std::string& url_key) {
	auto _method = ::vnx::search::SearchInterface_get_page_info::create();
	_method->url_key = url_key;
	auto _return_value = vnx_request(_method, false);
	auto _result = std::dynamic_pointer_cast<const ::vnx::search::SearchInterface_get_page_info_return>(_return_value);
	if(!_result) {
		throw std::logic_error("SearchEngineClient: !_result");
	}
	return _result->_ret_0;
}

std::vector<vnx::float32_t> SearchEngineClient::get_page_ranks(const std::vector<std::string>& url_keys, const vnx::bool_t& direct) {
	auto _method = ::vnx::search::SearchInterface_get_page_ranks::create();
	_method->url_keys = url_keys;
	_method->direct = direct;
	auto _return_value = vnx_request(_method, false);
	auto _result = std::dynamic_pointer_cast<const ::vnx::search::SearchInterface_get_page_ranks_return>(_return_value);
	if(!_result) {
		throw std::logic_error("SearchEngineClient: !_result");
	}
	return _result->_ret_0;
}

std::vector<::vnx::Object> SearchEngineClient::get_domain_list(const int32_t& limit, const uint32_t& offset) {
	auto _method = ::vnx::search::SearchInterface_get_domain_list::create();
	_method->limit = limit;
	_method->offset = offset;
	auto _return_value = vnx_request(_method, false);
	auto _result = std::dynamic_pointer_cast<const ::vnx::search::SearchInterface_get_domain_list_return>(_return_value);
	if(!_result) {
		throw std::logic_error("SearchEngineClient: !_result");
	}
	return _result->_ret_0;
}

std::vector<std::string> SearchEngineClient::reverse_lookup(const std::string& url_key) {
	auto _method = ::vnx::search::SearchInterface_reverse_lookup::create();
	_method->url_key = url_key;
	auto _return_value = vnx_request(_method, false);
	auto _result = std::dynamic_pointer_cast<const ::vnx::search::SearchInterface_reverse_lookup_return>(_return_value);
	if(!_result) {
		throw std::logic_error("SearchEngineClient: !_result");
	}
	return _result->_ret_0;
}

std::vector<std::pair<std::string, uint32_t>> SearchEngineClient::reverse_domain_lookup(const std::string& url_key) {
	auto _method = ::vnx::search::SearchInterface_reverse_domain_lookup::create();
	_method->url_key = url_key;
	auto _return_value = vnx_request(_method, false);
	auto _result = std::dynamic_pointer_cast<const ::vnx::search::SearchInterface_reverse_domain_lookup_return>(_return_value);
	if(!_result) {
		throw std::logic_error("SearchEngineClient: !_result");
	}
	return _result->_ret_0;
}

std::vector<std::string> SearchEngineClient::suggest_words(const std::string& prefix, const int32_t& limit) {
	auto _method = ::vnx::search::SearchInterface_suggest_words::create();
	_method->prefix = prefix;
	_method->limit = limit;
	auto _return_value = vnx_request(_method, false);
	auto _result = std::dynamic_pointer_cast<const ::vnx::search::SearchInterface_suggest_words_return>(_return_value);
	if(!_result) {
		throw std::logic_error("SearchEngineClient: !_result");
	}
	return _result->_ret_0;
}

std::vector<std::string> SearchEngineClient::suggest_domains(const std::string& prefix, const int32_t& limit) {
	auto _method = ::vnx::search::SearchInterface_suggest_domains::create();
	_method->prefix = prefix;
	_method->limit = limit;
	auto _return_value = vnx_request(_method, false);
	auto _result = std::dynamic_pointer_cast<const ::vnx::search::SearchInterface_suggest_domains_return>(_return_value);
	if(!_result) {
		throw std::logic_error("SearchEngineClient: !_result");
	}
	return _result->_ret_0;
}


} // namespace vnx
} // namespace search
