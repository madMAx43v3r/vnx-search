
// AUTO GENERATED by vnxcppcodegen

#include <vnx/vnx.h>
#include <vnx/search/package.hxx>
#include <vnx/search/CrawlFrontendClient.hxx>
#include <vnx/Hash64.hpp>
#include <vnx/Module.h>
#include <vnx/TopicPtr.hpp>
#include <vnx/search/CrawlFrontend__fetch_callback.hxx>
#include <vnx/search/CrawlFrontend__fetch_callback_return.hxx>
#include <vnx/search/CrawlFrontend_fetch.hxx>
#include <vnx/search/CrawlFrontend_fetch_return.hxx>
#include <vnx/search/CrawlFrontend_register_parser.hxx>
#include <vnx/search/CrawlFrontend_register_parser_return.hxx>
#include <vnx/search/FetchResult.hxx>
#include <vnx/search/HttpResponse.hxx>



namespace vnx {
namespace search {

CrawlFrontendClient::CrawlFrontendClient(const std::string& service_name)
	:	Client::Client(vnx::Hash64(service_name))
{
}

CrawlFrontendClient::CrawlFrontendClient(vnx::Hash64 service_addr)
	:	Client::Client(service_addr)
{
}

void CrawlFrontendClient::_fetch_callback(const std::shared_ptr<const ::vnx::search::HttpResponse>& response, const std::pair<::vnx::Hash64, uint64_t>& request_id) {
	auto _method = ::vnx::search::CrawlFrontend__fetch_callback::create();
	_method->response = response;
	_method->request_id = request_id;
	auto _return_value = vnx_request(_method);
}

void CrawlFrontendClient::_fetch_callback_async(const std::shared_ptr<const ::vnx::search::HttpResponse>& response, const std::pair<::vnx::Hash64, uint64_t>& request_id) {
	vnx_is_async = true;
	_fetch_callback(response, request_id);
}

std::shared_ptr<const ::vnx::search::FetchResult> CrawlFrontendClient::fetch(const std::string& url) {
	auto _method = ::vnx::search::CrawlFrontend_fetch::create();
	_method->url = url;
	auto _return_value = vnx_request(_method);
	auto _result = std::dynamic_pointer_cast<const ::vnx::search::CrawlFrontend_fetch_return>(_return_value);
	if(!_result) {
		throw std::logic_error("Client: !_result");
	}
	return _result->_ret_0;
}

void CrawlFrontendClient::register_parser(const ::vnx::Hash64& address, const std::vector<std::string>& mime_types, const int32_t& num_threads) {
	auto _method = ::vnx::search::CrawlFrontend_register_parser::create();
	_method->address = address;
	_method->mime_types = mime_types;
	_method->num_threads = num_threads;
	auto _return_value = vnx_request(_method);
}

void CrawlFrontendClient::register_parser_async(const ::vnx::Hash64& address, const std::vector<std::string>& mime_types, const int32_t& num_threads) {
	vnx_is_async = true;
	register_parser(address, mime_types, num_threads);
}


} // namespace vnx
} // namespace search
