
// AUTO GENERATED by vnxcppcodegen

#include <vnx/search/package.hxx>
#include <vnx/search/CrawlFrontendClient.hxx>
#include <vnx/Input.h>
#include <vnx/Output.h>


namespace vnx {
namespace search {

CrawlFrontendClient::CrawlFrontendClient(const std::string& service_name)
	:	Client::Client(vnx::Hash64(service_name))
{
}

CrawlFrontendClient::CrawlFrontendClient(vnx::Hash64 service_addr)
	:	Client::Client(service_addr)
{
}

::std::shared_ptr<const ::vnx::search::UrlIndex> CrawlFrontendClient::fetch(const ::std::string& url) {
	std::shared_ptr<vnx::Binary> _argument_data = vnx::Binary::create();
	vnx::BinaryOutputStream _stream_out(_argument_data.get());
	vnx::TypeOutput _out(&_stream_out);
	const vnx::TypeCode* _type_code = vnx::search::vnx_native_type_code_CrawlFrontend_fetch;
	{
		vnx::write(_out, url, _type_code, _type_code->fields[0].code.data());
	}
	_out.flush();
	_argument_data->type_code = _type_code;
	vnx_request(_argument_data);
	
	vnx::BinaryInputStream _stream_in(vnx_return_data.get());
	vnx::TypeInput _in(&_stream_in);
	const vnx::TypeCode* _return_type = _type_code->return_type;
	::std::shared_ptr<const ::vnx::search::UrlIndex> _ret_0;
	{
		const char* const _buf = _in.read(_return_type->total_field_size);
		if(_return_type->is_matched) {
		}
		for(const vnx::TypeField* _field : _return_type->ext_fields) {
			switch(_field->native_index) {
				case 0: vnx::read(_in, _ret_0, _return_type, _field->code.data()); break;
				default: vnx::skip(_in, _return_type, _field->code.data());
			}
		}
	}
	return _ret_0;
}

void CrawlFrontendClient::handle(const ::std::shared_ptr<const ::vnx::search::HttpResponse>& sample) {
	std::shared_ptr<vnx::Binary> _argument_data = vnx::Binary::create();
	vnx::BinaryOutputStream _stream_out(_argument_data.get());
	vnx::TypeOutput _out(&_stream_out);
	const vnx::TypeCode* _type_code = vnx::search::vnx_native_type_code_CrawlFrontend_handle_vnx_search_HttpResponse;
	{
		vnx::write(_out, sample, _type_code, _type_code->fields[0].code.data());
	}
	_out.flush();
	_argument_data->type_code = _type_code;
	vnx_request(_argument_data);
}

void CrawlFrontendClient::handle_async(const ::std::shared_ptr<const ::vnx::search::HttpResponse>& sample) {
	vnx_is_async = true;
	handle(sample);
}

void CrawlFrontendClient::register_parser(const ::vnx::Hash64& address, const ::std::vector<::std::string>& mime_types, const ::int32_t& num_threads) {
	std::shared_ptr<vnx::Binary> _argument_data = vnx::Binary::create();
	vnx::BinaryOutputStream _stream_out(_argument_data.get());
	vnx::TypeOutput _out(&_stream_out);
	const vnx::TypeCode* _type_code = vnx::search::vnx_native_type_code_CrawlFrontend_register_parser;
	{
		char* const _buf = _out.write(4);
		vnx::write_value(_buf + 0, num_threads);
		vnx::write(_out, address, _type_code, _type_code->fields[0].code.data());
		vnx::write(_out, mime_types, _type_code, _type_code->fields[1].code.data());
	}
	_out.flush();
	_argument_data->type_code = _type_code;
	vnx_request(_argument_data);
}

void CrawlFrontendClient::register_parser_async(const ::vnx::Hash64& address, const ::std::vector<::std::string>& mime_types, const ::int32_t& num_threads) {
	vnx_is_async = true;
	register_parser(address, mime_types, num_threads);
}


} // namespace vnx
} // namespace search
