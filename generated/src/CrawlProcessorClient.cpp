
// AUTO GENERATED by vnxcppcodegen

#include <vnx/search/package.hxx>
#include <vnx/search/CrawlProcessorClient.hxx>
#include <vnx/Input.h>
#include <vnx/Output.h>


namespace vnx {
namespace search {

CrawlProcessorClient::CrawlProcessorClient(const std::string& service_name)
	:	Client::Client(vnx::Hash64(service_name))
{
}

CrawlProcessorClient::CrawlProcessorClient(vnx::Hash64 service_addr)
	:	Client::Client(service_addr)
{
}

void CrawlProcessorClient::handle(const ::std::shared_ptr<const ::vnx::keyvalue::KeyValuePair>& sample) {
	std::shared_ptr<vnx::Binary> _argument_data = vnx::Binary::create();
	vnx::BinaryOutputStream _stream_out(_argument_data.get());
	vnx::TypeOutput _out(&_stream_out);
	const vnx::TypeCode* _type_code = vnx::search::vnx_native_type_code_CrawlProcessor_handle_vnx_keyvalue_KeyValuePair;
	{
		vnx::write(_out, sample, _type_code, _type_code->fields[0].code.data());
	}
	_out.flush();
	_argument_data->type_code = _type_code;
	vnx_request(_argument_data);
}

void CrawlProcessorClient::handle_async(const ::std::shared_ptr<const ::vnx::keyvalue::KeyValuePair>& sample) {
	vnx_is_async = true;
	handle(sample);
}


} // namespace vnx
} // namespace search
