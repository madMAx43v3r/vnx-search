
// AUTO GENERATED by vnxcppcodegen

#include <vnx/search/package.hxx>
#include <vnx/search/CrawlProcessorAsyncClient.hxx>
#include <vnx/Input.h>
#include <vnx/Output.h>


namespace vnx {
namespace search {

CrawlProcessorAsyncClient::CrawlProcessorAsyncClient(const std::string& service_name)
	:	AsyncClient::AsyncClient(vnx::Hash64(service_name))
{
}

CrawlProcessorAsyncClient::CrawlProcessorAsyncClient(vnx::Hash64 service_addr)
	:	AsyncClient::AsyncClient(service_addr)
{
}

std::vector<uint64_t>CrawlProcessorAsyncClient::vnx_get_pending_ids() const {
	std::vector<uint64_t> _list;
	return _list;
}

void CrawlProcessorAsyncClient::vnx_purge_request(uint64_t _request_id) {
}

void CrawlProcessorAsyncClient::vnx_callback_switch(uint64_t _request_id, std::shared_ptr<const vnx::Binary> _data) {
	vnx::BinaryInputStream _stream_in(_data.get());
	vnx::TypeInput _in(&_stream_in);
	const vnx::TypeCode* _return_type = _data->type_code;
	
}


} // namespace vnx
} // namespace search
